{"version":3,"sources":["Pages/ForgotPasswordPage/ForgotPasswordPage.js"],"names":["ForgotPasswordPage","_ref","loading","set_new_pass_response","userCountryId","checkNumber_response","verifySMS_response","verify_email_response","Do_Empty_signup_reducer_OBJECT_Action","forgotPassoword_response","update_person_info_response","resendSMS_code_response","sign_in_response","checkMobileNumber","VerifySMSCodeAction","setNewPassword","forgotPassword","setUserId","UpdatePersonInfo","ResendSMSCode","VerifyEmailNewSignup","signInAction","props","_objectWithoutProperties","_excluded","loaderImage","getFileSrcFromPublicFolder","_useState","URLSearchParams","window","location","search","useState","_useState2","_slicedToArray","_useState3","_useState4","password","setPassword","_useState5","_useState6","confirmPassword","setConfirmPassword","_useState7","_useState8","confirmPasswordText","setConfirmPasswordText","_useState9","_useState10","setAuthToken","_useState11","_useState12","loadToken","setLoadToken","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","passwordErrors","_useState19","_useState20","confirmPasswordErrors","locationData","useLocation","useEffect","interval","setInterval","clearInterval","statusCode","FAEToaster","message","undefined","toaster","history","dispatch","useDispatch","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","signInSuccesful","_customerData","wrap","_context2","prev","next","objectIsEmpty","console","log","_ref3","_callee","customer","id","_context","setCookies","setTimeout","SocketService","init","localStorage","getItem","push","pathname","concat","state","JSON","parse","removeItem","stop","_x","apply","arguments","customerData","t1","sent","t0","alert","abrupt","useCallback","token","useMemo","e","_jsxs","_Fragment","children","className","_jsx","FAELoading","type","height","screen","width","FAEImage","src","onSubmit","_locationData$state","preventDefault","length","userId","PaswordField","setPasswordValue","target","value","passwordLabel","FAEText","FAEButton","ToastContainer","connect","_ref4","_ref4$signUpPageReduc","signUpPageReducer","error","defaultReducer","bindActionCreators","memo"],"mappings":"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","file":"static/js/71.c4bde850.chunk.js","sourcesContent":["// react libraries \r\nimport React, { memo, useCallback, useEffect, useState } from 'react'\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha,  } from \"react-google-recaptcha-v3\";\r\nimport { bindActionCreators } from 'redux';\r\n// images components \r\nimport { FAEImage,FAEText, FAELoading, FAETitle } from '@findanexpert-fae/components';\r\nimport 'react-toastify/dist/ReactToastify.css'; \r\n// redux actions and utitlities \r\nimport { FAEToaster, getFileSrcFromPublicFolder, objectIsEmpty, setCookies } from '../../utils';\r\nimport {  checkMobileNumber, Do_Empty_signup_reducer_OBJECT_Action, forgotPassword, getSignUpForm,  ResendSMSCode,  saveSignUpForm,  setNewPassword,  setSignUpResponseToEmpty, signInAction, UpdatePersonInfo, VerifyEmailNewSignup, VerifySMSCodeAction, } from \"../../redux/actions/signUpPageActions\";\r\nimport \"../SIgnUpNewPage/signup.scss\"\r\nimport { connect, useDispatch } from 'react-redux'; \r\nimport history from '../../history';\r\nimport PaswordField from '../../widgets/passwordToLogin'; \r\nimport { FAEButton } from '@findanexpert-fae/components/dist/stories/FAEButton/FAEButton';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useMemo } from 'react';\r\nimport { SocketService } from '../../helpers/socketservice';\r\nimport { setUserId } from '../../redux/actions/defaultActions';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n function ForgotPasswordPage({\r\n// reducers \r\n    loading,\r\n    userCountryId,\r\n    checkNumber_response,\r\n    verifySMS_response, \r\n    verify_email_response,\r\n    set_new_pass_response,\r\n    forgotPassoword_response,\r\n    update_person_info_response,\r\n    resendSMS_code_response,\r\n    sign_in_response,\r\n// actions  \r\n    checkMobileNumber,\r\n    VerifySMSCodeAction,\r\n    Do_Empty_signup_reducer_OBJECT_Action,\r\n    forgotPassword,\r\n    setNewPassword,\r\n    UpdatePersonInfo,\r\n    ResendSMSCode,\r\n    VerifyEmailNewSignup,\r\n    signInAction,\r\n    setUserId,\r\n     ...props\r\n }) {\r\n/////////////////////////// variables \r\n    const loaderImage = getFileSrcFromPublicFolder(\"account-loader.svg\");\r\n    const searchParams=new URLSearchParams(window.location.search) \r\n/////////////////////////// hooks \r\n    const [userIdentification, setUserIdentfication] =useState(\"\") \r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [confirmPasswordText, setConfirmPasswordText] = useState(\"Please missmatching\");\r\n    const [authToken, setAuthToken]= useState(\"\")\r\n    const [loadToken,  setLoadToken]=useState(false) \r\n    const [forgotPassFlag, setForgotPassFlag]= useState(false) \r\n    const [customerData, setCustomerData]= useState({})\r\n    const [passwordErrors, setPaasswordError]= useState()\r\n    const [confirmPasswordErrors, setConfirmPasswordError]=useState()\r\n    \r\n  const locationData =useLocation()\r\n /////////////////////////// use effects \r\n     useEffect(()=>{\r\n        const interval= setInterval(()=>{\r\n              setLoadToken(!loadToken)\r\n            }, 20000)\r\n         return ()=> clearInterval(interval)\r\n      }, [loadToken]) \r\n    \r\n      useEffect(() => {   \r\n         if( set_new_pass_response?.statusCode==1   ){\r\n            FAEToaster({message:  set_new_pass_response?.message !== undefined && set_new_pass_response?.message  , toaster:\"error\"}\r\n          )\r\n        } \r\n       }, [ set_new_pass_response ]); \r\n\r\n    // sign in\r\n        const {  history: { location: state }} = props;\r\n        const dispatch = useDispatch(); \r\n        useEffect(async () => { \r\n          if (!objectIsEmpty(set_new_pass_response)) { \r\n            console.log(\"sign_in_response\")\r\n            const signInSuccesful = async (customer) => {\r\n              const { id } = customer; \r\n              await setCookies(\"userId\", id);\r\n              await setCookies(\"customer_details\", customer);\r\n              await setUserId(id);\r\n              setTimeout(() => {\r\n                SocketService.init(dispatch);\r\n              }, 300);\r\n              if (!objectIsEmpty((localStorage.getItem(\"redirectUrl\") !==null && localStorage.getItem(\"redirectUrl\") !==undefined)  ?localStorage.getItem(\"redirectUrl\") :{})) { \r\n                await history.push({\r\n                  pathname: `${localStorage.getItem(\"redirectUrl\")}`,\r\n                  state: JSON.parse(localStorage.getItem(\"stateObject\")),\r\n                });\r\n                await localStorage.removeItem(\"redirectUrl\");\r\n              } else { \r\n                await Do_Empty_signup_reducer_OBJECT_Action();\r\n                history.push(\"/\")\r\n                // (await state.state) !== undefined\r\n                //   ? history.push(`${state.state.next}`)\r\n                //   : history.push(\"/\");\r\n              }\r\n            };\r\n            const { statusCode, message, customerData } =   set_new_pass_response;\r\n              (await statusCode) !== 0 || statusCode == 2\r\n              ? alert(message)\r\n              : signInSuccesful(customerData);\r\n           }\r\n                         return ()=> Do_Empty_signup_reducer_OBJECT_Action(); \r\n        }, [  \r\n          set_new_pass_response, \r\n    ]);\r\n\r\n // /////////////////////////  functions \r\n      const handleToken = useCallback((token) => {\r\n        setAuthToken(token);\r\n      }, [loadToken]); \r\n\r\n// create password handler \r\n     const createPasswordHandle =(e)=>{\r\n      e.preventDefault()\r\n      if(confirmPassword==password && password?.length>=8 ){\r\n        setNewPassword({ \r\n          userId:locationData?.state?.userId,\r\n          password \r\n        })} else {\r\n          setConfirmPasswordText(\"Check is your Password 8 digit? OR Check is your password matching?\") \r\n        }\r\n      }\r\n  \r\n  const onChangeConfirmPass=useMemo((e)=>{\r\n      if(confirmPassword==password){\r\n        setConfirmPasswordText(\"\") \r\n      } else{\r\n        setConfirmPasswordText(\"Plase match your password\") \r\n      }\r\n     }, [confirmPassword]) \r\n  \r\n     const SkipHandler=()=>{\r\n      history.push(\"/\")\r\n     }\r\n   return (\r\n    \r\n         <>\r\n          <div className=\"fae--new-signup-page-container\" >\r\n             {loading && (\r\n               <div className='fae-signup-loader'>\r\n                  <FAELoading type=\"svg\" loaderImage={loaderImage} height=\"100vh\" />\r\n                </div> \r\n                )}\r\n                {/* main head  */}\r\n                 <>\r\n                   <div className=\"loginlogotop\">\r\n                   {window.screen.width>600?\r\n                        <FAEImage className=\"fae-login-desktop-logo\" src={getFileSrcFromPublicFolder(\"expert_logo_full.PNG\")}/>\r\n                        : <>\r\n                            <FAEImage className=\"fae-mobile-logo\" src={getFileSrcFromPublicFolder(\"expert_logo_full.PNG\")}/>\r\n                            {/* <FAETitle\r\n                                className=\"fae-mobile-login-title\"\r\n                                label=\"Expert\"\r\n                                logo={getFileSrcFromPublicFolder(\"title_logo.svg\")}\r\n                            /> */}\r\n                            {/* <FAEText className=\"fae-aaa-text\">AnyService AnyTime AnyWhere</FAEText> */}\r\n                        </> }\r\n                    </div>\r\n                    \r\n                  {/* main body  context  */}\r\n                    <main>\r\n                      <form onSubmit={createPasswordHandle}>\r\n                            <PaswordField\r\n                              setPasswordValue={(e)=>setPassword(e.target.value)}\r\n                              passwordLabel=\"Please enter your password\" />\r\n                             <span className=\"error\">{passwordErrors}</span>\r\n                            <PaswordField  \r\n                              setPasswordValue={(e)=>setConfirmPassword(e.target.value) }\r\n                              passwordLabel=\"Please confirm your password\" />\r\n                              <span className=\"error\">{confirmPasswordErrors}</span>\r\n                             <FAEText className=\"fae-confirm-Text\">{confirmPasswordText}</FAEText>\r\n                            <FAEButton>Next</FAEButton>\r\n                        </form> \r\n                    </main> \r\n                 </>   \r\n            </div>\r\n           <ToastContainer/> \r\n        </> \r\n      )\r\n   }\r\n\r\nconst mapStateToProps = ({\r\n    signUpPageReducer: {\r\n        error,\r\n        loading,\r\n        checkNumber_response,\r\n        verify_email_response,\r\n        set_new_pass_response,\r\n        forgotPassoword_response,\r\n        update_person_info_response,\r\n        resendSMS_code_response,\r\n        verifySMS_response,  \r\n        sign_in_response\r\n      },\r\n      defaultReducer: { userCountryId },\r\n})=>{\r\n    return {\r\n        loading,\r\n        userCountryId,\r\n        checkNumber_response,\r\n        verify_email_response,\r\n        set_new_pass_response,\r\n        forgotPassoword_response,\r\n        update_person_info_response,\r\n        resendSMS_code_response,\r\n        verifySMS_response, \r\n        sign_in_response\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch)=>{\r\n    return bindActionCreators({ \r\n        checkMobileNumber, \r\n        VerifySMSCodeAction,\r\n        ResendSMSCode,\r\n        UpdatePersonInfo,\r\n        forgotPassword,\r\n        setNewPassword,\r\n        VerifyEmailNewSignup,\r\n        Do_Empty_signup_reducer_OBJECT_Action ,\r\n\r\n        signInAction,\r\n        setUserId\r\n    }, dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps )(memo(ForgotPasswordPage))\r\n\r\n\r\n\r\n// //libs\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   FAETitle,\r\n//   FAETextField,\r\n//   FAEButton,\r\n//   FAEPhoneInput,\r\n//   FAECodeInput,\r\n//   FAEDialogueBox,\r\n// } from \"@findanexpert-fae/components\";\r\n// import { bindActionCreators } from \"redux\";\r\n// import { connect } from \"react-redux\";\r\n\r\n// //src\r\n// import { getFileSrcFromPublicFolder, objectIsEmpty } from \"../../utils\";\r\n// import history from \"../../history\";\r\n// import {\r\n//   makeResetPasswordResponseFalse,\r\n//   makeSendResetCodeResponseFalse,\r\n//   makeVerifyResetCodeResponseFalse,\r\n//   resetPassword,\r\n//   sendResetCode,\r\n//   verifyResetCode,\r\n// } from \"../../redux/actions/forgotPasswordPageActions\";\r\n\r\n// //scss\r\n// import \"./ForgotPasswordPage.scss\";\r\n\r\n// const ForgotPasswordPage = ({\r\n//   error,\r\n//   loading,\r\n//   sendResetCodeResponse,\r\n//   verifyResetCodeResponse,\r\n//   resetPasswordResponse,\r\n//   resetPassword,\r\n//   sendResetCode,\r\n//   verifyResetCode,\r\n//   makeSendResetCodeResponseFalse,\r\n//   makeVerifyResetCodeResponseFalse,\r\n//   makeResetPasswordResponseFalse,\r\n//   userCountryId,\r\n// }) => {\r\n//   document.title = \"Expert | Reset Password\";\r\n//   const [email, setEmail] = useState(\"\"); \r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n//   const [mobile, setMobile] = useState(\"\");\r\n//   const [code, setCode] = useState(\"\");\r\n//   const [isCodeSent, setIsCodeSent] = useState(false);\r\n//   const [isCodeVerified, setIsCodeVerified] = useState(false);\r\n//   const [isPasswordUpdated, setIsPasswordUpdated] = useState(false);\r\n//   const [open, setOpen] = useState(\"\");\r\n//   const [content, setContent] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (code.length === 6) {\r\n//       verifyResetCode({\r\n//         email: email !== \"\" ? email : mobile,\r\n//         code,\r\n//         countryCode: userCountryId,\r\n//       });\r\n//     }\r\n//   }, [code, email, mobile, userCountryId, verifyResetCode]);\r\n\r\n//   useEffect(() => {\r\n//     if (!objectIsEmpty(sendResetCodeResponse)) {\r\n//       const { error, message } = sendResetCodeResponse;\r\n//       setOpen(true);\r\n//       makeSendResetCodeResponseFalse();\r\n//       setContent(message);\r\n//       if (!error) {\r\n//         setIsCodeSent(true);\r\n//       }\r\n//     }\r\n//   }, [makeSendResetCodeResponseFalse, sendResetCodeResponse]);\r\n\r\n//   useEffect(() => {\r\n//     if (!objectIsEmpty(verifyResetCodeResponse)) {\r\n//       const { error, message } = verifyResetCodeResponse;\r\n//       setOpen(true);\r\n//       setContent(message);\r\n//       makeVerifyResetCodeResponseFalse();\r\n//       if (!error) {\r\n//         setIsCodeVerified(true);\r\n//       }\r\n//     }\r\n//   }, [makeVerifyResetCodeResponseFalse, verifyResetCodeResponse]);\r\n\r\n//   useEffect(() => {\r\n//     if (!objectIsEmpty(resetPasswordResponse)) {\r\n//       const { error, message } = resetPasswordResponse;\r\n//       setOpen(true);\r\n//       setContent(message);\r\n//       makeResetPasswordResponseFalse();\r\n//       if (!error) {\r\n//         setIsPasswordUpdated(true);\r\n//       }\r\n//     }\r\n//   }, [makeResetPasswordResponseFalse, resetPasswordResponse]);\r\n  \r\n//   const isMobile= email.indexOf(\"@\") ==-1 ?true: false\r\n//   const handleSendResetCode = (e) => {\r\n  \r\n//     e.preventDefault();\r\n     \r\n//     if (email === \"\" && mobile === \"\") {\r\n//       setOpen(true);\r\n//       setContent(\"Please fill at least one field\");\r\n//     } else {\r\n//       sendResetCode({\r\n//         email: email !== \"\" ? email : mobile,\r\n//         countryCode: userCountryId,\r\n//         isMobile:isMobile\r\n//       });\r\n//     }\r\n//   }; \r\n//   const handleResetPassword = (e) => {\r\n//     e.preventDefault();\r\n//     resetPassword({\r\n//       email: email !== \"\" ? email : mobile,\r\n//       code,\r\n//       password,\r\n//       countryCode: userCountryId,\r\n//     }); \r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"fae--sign-in-page-container dpt dpb\">\r\n//         <div className=\"fae--sign-in-page-wrapper\">\r\n//           <FAETitle\r\n//             label=\"Reset Password\"\r\n//             logo={getFileSrcFromPublicFolder(\"title_logo.svg\")}\r\n//           />\r\n//           {!isCodeSent ? (\r\n//             <form\r\n//               className=\"fae--forgot-password-send-code-form\"\r\n//               onSubmit={handleSendResetCode}\r\n//             >\r\n//               <FAETextField\r\n//                 type=\"email\"\r\n//                 getValue={(value) => {\r\n//                   setEmail(value);\r\n//                   setMobile(\"\"); \r\n//                 }}\r\n//                 value={email}\r\n//                 placeholder=\"Enter your email\"\r\n//                 primary\r\n//                 shadowBoxProps={{ primary: true }}\r\n//               />\r\n//               OR\r\n//               <FAEPhoneInput\r\n//                 getValue={(value) => { \r\n//                   setMobile(value);\r\n//                   setEmail(\"\");\r\n//                 }}\r\n//                 value={mobile}\r\n//                 primary\r\n//                 shadowBoxProps={{ primary: true }}\r\n//               />{\" \"}\r\n//               <FAEButton>{loading ? \"Please Wait...\" : \"Send Code\"}</FAEButton>\r\n//             </form>\r\n//           ) : !isCodeVerified ? (\r\n//             <FAECodeInput getValue={setCode} />\r\n//           ) : (\r\n//             <form\r\n//               className=\"fae--forgot-password-send-code-form\"\r\n//               onSubmit={handleResetPassword}\r\n//             >\r\n//               <FAETextField\r\n//                 type=\"password\"\r\n//                 getValue={setPassword}\r\n//                 value={password}\r\n//                 placeholder=\"Password\"\r\n//                 primary\r\n//                 shadowBoxProps={{ primary: true }}\r\n//                 error={(value) =>\r\n//                   value.length !== 0 && value.length < 8 ? true : false\r\n//                 }\r\n//                 errorMessage={\"Password length must be 8 or greater\"}\r\n//                 required\r\n//               />\r\n//               <FAETextField\r\n//                 type=\"password\"\r\n//                 getValue={setConfirmPassword}\r\n//                 value={confirmPassword}\r\n//                 placeholder=\"Confirm Password\"\r\n//                 primary\r\n//                 shadowBoxProps={{ primary: true }}\r\n//                 error={(value) =>\r\n//                   (value.length !== 0 && value.length < 8) || value !== password\r\n//                     ? true\r\n//                     : false\r\n//                 }\r\n//                 errorMessage={\r\n//                   password !== confirmPassword && confirmPassword.length > 7\r\n//                     ? \"Password do not match!\"\r\n//                     : \"Confirm Password length must be 8 or greater\"\r\n//                 }\r\n//                 required\r\n//               />\r\n//               {password === confirmPassword && (\r\n//                 <FAEButton>\r\n//                   {\" \"}\r\n//                   {loading ? \"Please Wait...\" : \"Update Password\"}{\" \"}\r\n//                 </FAEButton>\r\n//               )}\r\n//             </form>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//       <FAEDialogueBox\r\n//         open={open}\r\n//         content={content}\r\n//         buttons={[\r\n//           {\r\n//             label: \"Ok\",\r\n//             onClick: () => {\r\n//               if (isPasswordUpdated) {\r\n//                 history.push(\"/sign-in\");\r\n//                 setOpen(false);\r\n//               } else {\r\n//                 setOpen(false);\r\n//               }\r\n//             },\r\n//           },\r\n//         ]}\r\n//       />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = ({\r\n//   forgotPasswordPageReducer: {\r\n//     error,\r\n//     loading,\r\n//     sendResetCodeResponse,\r\n//     verifyResetCodeResponse,\r\n//     resetPasswordResponse,\r\n//   },\r\n//   defaultReducer: { userCountryId },\r\n// }) => ({\r\n//   error,\r\n//   loading,\r\n//   sendResetCodeResponse,\r\n//   verifyResetCodeResponse,\r\n//   resetPasswordResponse,\r\n//   userCountryId,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return bindActionCreators(\r\n//     {\r\n//       sendResetCode,\r\n//       verifyResetCode,\r\n//       resetPassword,\r\n//       makeSendResetCodeResponseFalse,\r\n//       makeVerifyResetCodeResponseFalse,\r\n//       makeResetPasswordResponseFalse,\r\n//     },\r\n//     dispatch\r\n//   );\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ForgotPasswordPage);\r\n"],"sourceRoot":""}