{"version":3,"sources":["redux/actions/dateTimeSelectionPageActions.js","redux/actions/dateTimeSelectionForClinicsActions.js","Pages/DateTimeSelectionPage/DateTimeSelectionPage.js"],"names":["APP_BASE_URL","process","REACT_APP_BASE_URL","PAYMENT_JDS","REACT_APP_PAYMENT_JDS","getAvaliableBookingSlots","_ref","selectedDate","serviceId","bookingDuration","providerId","fetchAction","type","endpoint","concat","payload","JSON","stringify","bookingDate","providersId","duration","verb","saveBookingDateAndTime","_ref2","selectedTime","bookingId","cartId","notes","bookingStartTime","bookingEndTime","addressId","headers","contentType","bookingTime","tempBookingId","customerNotes","saveBookingDateAndTimeNextTime","_ref3","makeDateTimeNextPageFalse","APP_BASE_URL_JDS","getBookingSlots","latitude","longitude","countryId","distance","serviceVenu","Date","getHours","length","getMinutes","getFullYear","getMonth","getDate","alternateGetBookingSlots","isInClinic","businessId","tempbookingid","isBusiness","SaveAlternateTempBooking","loaderImage","getFileSrcFromPublicFolder","connect","_ref4","_ref4$dateTimeSelecti","dateTimeSelectionPageReducer","error","loading","timeSlots","nextPageDateTimeSelection","_ref4$defaultReducer","defaultReducer","userId","userCountryId","_ref4$dateTimeSelecti2","dateTimeSelectionForClinicsReducer","clinicslotLoading","clinicTimeSlots","_ref4$summaryPageRedu","summaryPageReducer","holdpaymentData","createBookingResp","dispatch","bindActionCreators","_startEndTime$","_startEndTime$2","_ref$timeSlots","_ref$clinicTimeSlots","service","useParams","serviceName","addSpaces","document","title","state","useLocation","isInHouse","AddressSelectid","sessionFlag","voucherId","isOnline","todayDate","_useState","useState","_useState2","_slicedToArray","setSelectedDate","_useState3","_useState4","setSelectedTime","renameSLotsKeys","map","obj","useEffect","startEndTime","filter","eachSlot","availablefrom","startTime","endTime","availableto","handleSaveBookingDateAndTime","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","preventDefault","history","push","pathname","_objectSpread","servicePathName","availableProviders","stop","_x","apply","arguments","_jsx","_Fragment","children","_jsxs","className","FAETitle","label","logo","FAEDateTimeSelection","loaderForTimeSlots","loaderPropsForTimeSlots","height","getSelectedDate","getSelectedTime","slots","faeBookingTimeSlotsParser","style","display","justifyContent","FAEButton","borderRadius","onClick"],"mappings":"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","file":"static/js/40.d3b94551.chunk.js","sourcesContent":["import { fetchAction } from \"../utils\";\r\n\r\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\r\nconst PAYMENT_JDS = process.env.REACT_APP_PAYMENT_JDS\r\nexport const getAvaliableBookingSlots = ({\r\n  selectedDate, \r\n  serviceId, \r\n  bookingDuration,\r\n  providerId, \r\n}) => {\r\n  return fetchAction({\r\n    type: \"GET_BOOKING_SLOTS_INHOUSE\",\r\n    endpoint: `${PAYMENT_JDS}/TimeSlots/GetTimeSlots`,\r\n    payload: JSON.stringify({ \r\n         bookingDate :selectedDate,\r\n         serviceId :serviceId,\r\n         providersId :providerId,\r\n         duration :bookingDuration  \r\n    }),\r\n    verb: \"POST\",\r\n  });\r\n};\r\n\r\nexport const saveBookingDateAndTime = ({\r\n  selectedDate,\r\n  selectedTime,\r\n  bookingId,\r\n  cartId,\r\n  notes,\r\n  bookingStartTime,\r\n  bookingEndTime,\r\n  addressId\r\n}) => {\r\n  return fetchAction({\r\n    type: \"SAVE_DATE_AND_TIME\",\r\n    verb: \"POST\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/SaveTempBooking`,\r\n    payload: JSON.stringify({\r\n      bookingDate: selectedDate,\r\n      bookingTime: selectedTime,\r\n      tempBookingId: bookingId,\r\n      cartId: cartId,\r\n      customerNotes: notes,\r\n    }),\r\n  });\r\n}; \r\n\r\n\r\nexport const saveBookingDateAndTimeNextTime = ({\r\n  selectedDate, \r\n  cartId, \r\n  bookingStartTime,\r\n  bookingEndTime,\r\n  addressId \r\n}) => { \r\n\r\n  return fetchAction({\r\n    type: \"SAVE_DATE_AND_TIME\",\r\n    verb: \"PUT\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/BookingDateTime`,\r\n    payload: JSON.stringify({ \r\n        cartId: cartId,\r\n        bookingDate: selectedDate,\r\n        bookingStartTime: bookingStartTime,\r\n        bookingEndTime: bookingEndTime,\r\n        addressId:addressId\r\n    }),\r\n  });\r\n}; \r\nexport const makeDateTimeNextPageFalse = () => {\r\n  return {\r\n    type: \"MAKE_DATE_TIME_NEXT_PAGE_FALSE\",\r\n  };\r\n};\r\n","import moment from \"moment\";\r\nimport { fetchAction } from \"../utils\";\r\n\r\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\r\nconst APP_BASE_URL_JDS = process.env.REACT_APP_PAYMENT_JDS;\r\n\r\nexport const getBookingSlots = ({\r\n  selectedDate, \r\n  serviceId,\r\n  latitude,\r\n  longitude,\r\n  countryId,\r\n  duration,\r\n  distance,\r\n  serviceVenu,\r\n   \r\n}) => {\r\n \r\n const convertTime12to24 = (time12h) => {\r\n    const [time, modifier] = time12h.split(' '); \r\n    let [hours, minutes] = time.split(':'); \r\n    if (hours === '12') {\r\n      hours = '00';\r\n    } \r\n    if (modifier === 'PM') {\r\n      hours = parseInt(hours, 10) + 12;\r\n    } \r\n    return `${hours}:${minutes}`;\r\n  }\r\n\r\n  var currentTime =  `${\r\n    `${new Date().getHours()}`.length === 1\r\n      ? `0${new Date().getHours()}`\r\n      : new Date().getHours()\r\n  }:${\r\n    `${new Date().getMinutes()}`.length === 1\r\n      ? `0${new Date().getMinutes()}`\r\n      : new Date().getMinutes()\r\n  }`;\r\n  \r\n  const currentDateAndTime= \r\n  `${new Date().getFullYear()}-${\r\n    `${new Date().getMonth() + 1}`.length === 1\r\n      ? `0${new Date().getMonth() + 1}`\r\n      : new Date().getMonth() + 1\r\n  }-${\r\n    `${new Date().getDate()}`.length === 1\r\n      ? `0${new Date().getDate()}`\r\n      : new Date().getDate()\r\n  }`\r\n  return fetchAction({\r\n    type: \"GET_BOOKING_SLOTS_DATA\",\r\n    endpoint: `${APP_BASE_URL_JDS}/Clinic/CreateTimeSlots`,\r\n\r\n    payload: JSON.stringify({\r\n          bookingDate: selectedDate,\r\n          latitude: latitude,\r\n          longitude: longitude,\r\n          distance: distance,\r\n          countryId: countryId,\r\n          serviceId: serviceId,\r\n          duration: duration,\r\n          serviceVenu: serviceVenu \r\n    }),\r\n    verb: \"POST\",\r\n  });\r\n};\r\n\r\n \r\n\r\nexport const makeDateTimeNextPageFalse = () => {\r\n  return {\r\n    type: \"MAKE_DATE_TIME_NEXT_PAGE_FALSE\",\r\n  };\r\n};\r\n\r\n// alternate action of get slot \r\nexport const alternateGetBookingSlots = ({\r\n  selectedDate,\r\n  providerId,\r\n  isInClinic,\r\n  duration,\r\n  cartId,\r\n  serviceId,\r\n  tempbookingid, \r\n  isBusiness,\r\n  businessId,\r\n  serviceVenu\r\n}) => {\r\n    \r\n  return fetchAction({\r\n    type: \"GET_ALTERNATE_BOOKING_SLOTS_DATA\",\r\n    endpoint: `${APP_BASE_URL_JDS}/Clinic/CreateTimeSlotsForBusiness`,\r\n    payload:  JSON.stringify({ \r\n      businessId: businessId,\r\n      bookingDate: selectedDate,\r\n      serviceId: serviceId,\r\n      duration: duration,\r\n      serviceVenu:serviceVenu, \r\n        }), \r\n    verb: \"POST\",\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const SaveAlternateTempBooking = ({ \r\n tempBookingId,\r\n addressId ,\r\n cartId ,\r\n bookingDate,\r\n bookingTime,\r\n customerNotes\r\n}) => { \r\n  return fetchAction({\r\n    type: \"SAVE_ALTERNET_BOOKING\",\r\n    verb: \"POST\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/SaveTempBooking`,\r\n    payload: JSON.stringify({\r\n        tempBookingId: tempBookingId,\r\n        addressId: addressId,\r\n        cartId:cartId,\r\n        bookingDate: bookingDate,\r\n        bookingTime:bookingTime,\r\n        customerNotes:customerNotes\r\n    }),\r\n  });\r\n};\r\n\r\n","//libs\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  FAEDateTimeSelection,\r\n  FAEButton,\r\n  FAETitle,\r\n} from \"@findanexpert-fae/components\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n\r\n//src\r\nimport { \r\n  makeDateTimeNextPageFalse,\r\n  saveBookingDateAndTime,\r\n  getAvaliableBookingSlots,\r\n  saveBookingDateAndTimeNextTime\r\n} from \"../../redux/actions/dateTimeSelectionPageActions\";\r\nimport { getBookingSlots } from \"../../redux/actions/dateTimeSelectionForClinicsActions\";\r\nimport { addSpaces, getCookies, getFileSrcFromPublicFolder } from \"../../utils\";\r\nimport { faeBookingTimeSlotsParser } from \"../../parsers\";\r\nimport history from \"../../history\";\r\n\r\n//scss\r\nimport \"./DateTimeSelectionPage.scss\";\r\n\r\nconst loaderImage = getFileSrcFromPublicFolder(\"loader.GIF\");\r\n\r\nconst DateTimeSelectionPage = ({\r\n  loading, \r\n  timeSlots = [],\r\n  clinicTimeSlots=[],\r\n  getBookingSlots,\r\n  getAvaliableBookingSlots,\r\n  saveBookingDateAndTime,\r\n  makeDateTimeNextPageFalse,   \r\n  userId,\r\n  saveBookingDateAndTimeNextTime,\r\n  userCountryId,\r\n  clinicslotLoading,\r\n  holdpaymentData,    createBookingResp\r\n}) => { \r\n  const { service } = useParams();\r\n  const serviceName = addSpaces(service, \"-\");\r\n  document.title = `Chelsford | ${serviceName} - Schedule`;\r\n  const location = useLocation();\r\n   \r\n  const { state } = location;\r\n  const {\r\n    serviceId,\r\n    isInHouse,\r\n    isInClinic,\r\n    duration,\r\n    bookingId,\r\n    cartId,\r\n    notes,\r\n    AddressSelectid,\r\n    voucherId,\r\n    sessionFlag, \r\n    isOnline,\r\n    providerId,\r\n    latitude,\r\n   longitude\r\n  } = state;   \r\n  const todayDate= `${new Date().getFullYear()}-${\r\n    `${new Date().getMonth() + 1}`.length === 1\r\n      ? `0${new Date().getMonth() + 1}`\r\n      : new Date().getMonth() + 1\r\n  }-${\r\n    `${new Date().getDate()}`.length === 1\r\n      ? `0${new Date().getDate()}`\r\n      : new Date().getDate()\r\n  }`\r\n  const [selectedDate, setSelectedDate] = useState(todayDate);\r\n  const [selectedTime, setSelectedTime] = useState(\"\"); \r\n  if(isInClinic) {  \r\n    timeSlots=clinicTimeSlots\r\n    loading=clinicslotLoading\r\n  }\r\n  const renameSLotsKeys= timeSlots.map((obj)=>{\r\n    obj['availablefrom'] = obj['timeStart'];\r\n    obj['availableto'] = obj['timeEnd'];\r\n   return obj\r\n  });\r\n  \r\n   useEffect(() => {\r\n    setSelectedTime(\"\");\r\n    if (selectedDate !== \"\") { \r\n     if(isInClinic) {  \r\n       getBookingSlots({ \r\n          selectedDate,\r\n          latitude: latitude,\r\n          longitude: longitude,\r\n          distance: 20,\r\n          countryId: userCountryId,\r\n          serviceId: serviceId,\r\n          duration: duration,\r\n          serviceVenu: 2  \r\n      });\r\n    }else if(isInHouse) { \r\n      getAvaliableBookingSlots({ \r\n        selectedDate, \r\n        serviceId, \r\n        bookingDuration:duration,\r\n        providerId:  providerId ==\"Null\" ?\"\":providerId,  \r\n      })\r\n     }\r\n    }\r\n    return () => {\r\n      makeDateTimeNextPageFalse();\r\n    };\r\n  }, [\r\n    bookingId,\r\n    duration,\r\n    getBookingSlots,\r\n    getAvaliableBookingSlots,\r\n    isInClinic,\r\n    isInHouse,\r\n    makeDateTimeNextPageFalse,\r\n    selectedDate,\r\n    serviceId,\r\n  ]); \r\n  \r\n  const startEndTime= renameSLotsKeys.filter((eachSlot)=>eachSlot.availablefrom==selectedTime)\r\n  const startTime= startEndTime[0]?.availablefrom;\r\n  const endTime= startEndTime[0]?.availableto \r\n  const handleSaveBookingDateAndTime = async (e) => { \r\n    e.preventDefault(); \r\n    if(isInHouse){   \r\n      await saveBookingDateAndTimeNextTime({\r\n        selectedDate, \r\n        cartId: cartId, \r\n        bookingStartTime:startTime,\r\n        bookingEndTime:endTime,\r\n        addressId: AddressSelectid,\r\n      })\r\n    }\r\n   await makeDateTimeNextPageFalse();\r\n \r\n   if(isInClinic){ \r\n    await history.push({ \r\n     pathname: `/booking/${service}/date-time-selection/select-clinic-address`,\r\n      state: {\r\n        ...state,\r\n        selectedDate: selectedDate,\r\n        selectedTime:selectedTime,\r\n        servicePathName: service,\r\n        startTime:startTime,\r\n        endTime:endTime,\r\n        providerId:renameSLotsKeys?.availableProviders\r\n      },\r\n    });\r\n   } else if(isInHouse){ \r\n    await history.push({\r\n       pathname: `/booking/${service}/summary`,\r\n       state: {\r\n         ...state,\r\n         servicePathName: service\r\n       },\r\n     });\r\n   }\r\n  }; \r\n const handleSaveBookingDateAndTimeSession= async ()=>{\r\n  await saveBookingDateAndTime({\r\n    selectedDate, \r\n    cartId: cartId, \r\n    bookingStartTime:startTime,\r\n    bookingEndTime:endTime,\r\n    addressId: AddressSelectid,\r\n  })\r\n   await history.push(\"/your-bookings/session\")\r\n }  \r\n  return (\r\n    <>\r\n      <div className=\"fae--date-time-selection-main-container dpt dpb\">\r\n        <FAETitle\r\n          label={serviceName}\r\n          logo={getFileSrcFromPublicFolder(\"title_logo.svg\")}\r\n        />\r\n        <FAEDateTimeSelection\r\n          className=\"fae-date-time-selection-container-width\"\r\n          loaderForTimeSlots={loading}\r\n          loaderPropsForTimeSlots={{\r\n            loaderImage,\r\n            height: \"200px\",\r\n            type: \"video\",\r\n          }}\r\n          getSelectedDate={setSelectedDate}\r\n          getSelectedTime={setSelectedTime}\r\n          slots={faeBookingTimeSlotsParser(renameSLotsKeys)}\r\n        />\r\n        {selectedTime !== \"\" && (\r\n          <div\r\n            style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            className=\"dpb\" >\r\n              {sessionFlag !== true && <FAEButton\r\n              className=\"fae--date-time-selection-button\"\r\n              style={{ borderRadius: \"4px\" }}\r\n              onClick={handleSaveBookingDateAndTime} >\r\n                Next\r\n            </FAEButton>} \r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({\r\n  dateTimeSelectionPageReducer: {\r\n    error,\r\n    loading,\r\n    timeSlots,\r\n    nextPageDateTimeSelection,\r\n  }, defaultReducer: {userId, userCountryId}\r\n  ,dateTimeSelectionForClinicsReducer:{ clinicslotLoading,  clinicTimeSlots},\r\n  summaryPageReducer: {     holdpaymentData,    createBookingResp  }\r\n}) => ({\r\n  error,\r\n  loading,\r\n  timeSlots,\r\n  nextPageDateTimeSelection,\r\n  userId,\r\n  userCountryId,\r\n  clinicTimeSlots,\r\n  clinicslotLoading,\r\n\r\n  holdpaymentData,    createBookingResp\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      getBookingSlots,\r\n      getAvaliableBookingSlots,\r\n      saveBookingDateAndTime,\r\n      makeDateTimeNextPageFalse,\r\n      saveBookingDateAndTimeNextTime\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DateTimeSelectionPage);\r\n"],"sourceRoot":""}