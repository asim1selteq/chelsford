{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","Pages/ChatPage/SupportChatPage.js","Pages/ChatPage/index.js"],"names":["_objectDestructuringEmpty","obj","TypeError","AttachmentSvg","getFileSrcFromPublicFolder","SendSvg","SenderMessage","_ref2","_ref2$message","message","_ref2$isSeen","isSeen","_jsx","_Fragment","children","_jsxs","className","ReceiverMessage","_ref3","_ref3$message","ProfileAvatar","_ref5","profile","class","src","alt","name","getAdminToken","_longtoken","longtoken","document","getElementById","getAttribute","split","replace","ChatBox","_ref","_useState","useState","_useState2","_slicedToArray","setmessage","_useSelector","useSelector","state","chatSupportPageReducer","messages","conversationId","visitor","dispatch","useDispatch","chatBodyRef","useRef","useEffect","setVisitor","setTimeout","w","style","display","getMessages","EventBus","on","data","type","ChatActions","SET_VISITOR","payload","detail","scrollToBottom","NEW_ADMIN_MESSAGE","SEEN_MESSAGE","handleMessageSubmit","trim","sendMessage","fromId","userName","text","adminToken","host","then","SET_CONVERSATION_ID","conversation","vt","sessionStorage","getItem","JSON","parse","setItem","stringify","_objectSpread","catch","err","console","log","getAllMessages","res","SET_MESSAGES","_chatBodyRef$current","current","scrollIntoView","behavior","block","v","length","map","msg","from","status","ref","placeholder","value","onFocus","e","lastMessage","markMessageSeen","error","handleMessageSeen","onKeyPress","charCode","onChange","target","onClick"],"mappings":"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","file":"static/js/47.e1f2ca1d.chunk.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { getFileSrcFromPublicFolder } from \"../../utils\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./style.scss\";\r\nimport EventBus from \"../../helpers/eventBus\";\r\nimport { ChatActions } from \"../../redux/actions/chatActions\";\r\nimport { getAllMessages, markMessageSeen, sendMessage } from \"./SendMessage\";\r\n\r\nconst AttachmentSvg = getFileSrcFromPublicFolder(\"attachement.svg\");\r\nconst SendSvg = getFileSrcFromPublicFolder(\"send.svg\");\r\n\r\nexport const ChatBox = ({}) => {\r\n  const [message, setmessage] = useState(\"\");\r\n  const { messages, conversationId, visitor } = useSelector(\r\n    (state) => state.chatSupportPageReducer,\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const chatBodyRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // set if possible visitor in store state.\r\n    setVisitor();\r\n\r\n    // hide chat widget\r\n    setTimeout(() => {\r\n      let w = document.getElementById(\"chat-box-icon\");\r\n      if (w) w.style.display = \"none\";\r\n    }, 2000);\r\n    getMessages();\r\n    // disabling widget socket connections.\r\n    EventBus.on(\"v-join-ack\", (data) => { \r\n      dispatch({ type: ChatActions.SET_VISITOR, payload: data.detail });\r\n    });\r\n\r\n    EventBus.on(\"admin-message\", (data) => {\r\n      scrollToBottom();\r\n      dispatch({\r\n        type: ChatActions.NEW_ADMIN_MESSAGE,\r\n        payload: data.detail,\r\n      });\r\n    });\r\n    EventBus.on(\"message-seen\", (data) => { \r\n      dispatch({\r\n        type: ChatActions.SEEN_MESSAGE,\r\n        payload: data.detail.data,\r\n      });\r\n    });\r\n    return () => {\r\n      // you have to enable it chat bot to enable it change it with block\r\n      let w = document.getElementById(\"chat-box-icon\");\r\n      if (w) w.style.display = \"block\";\r\n    };\r\n  }, []);\r\n\r\n  const handleMessageSubmit = () => {\r\n    if (!message.trim()) return;\r\n    if (!visitor) return; \r\n    sendMessage({\r\n      fromId: visitor.userName,\r\n      conversationId,\r\n      text: message,\r\n      adminToken: getAdminToken(),\r\n      host: \"expert-dev.findanexpert.net\",\r\n    })\r\n      .then((data) => { \r\n        if (!conversationId) {\r\n          dispatch({\r\n            type: ChatActions.SET_CONVERSATION_ID,\r\n            payload: data.conversation.conversationId,\r\n          });\r\n          setmessage(\"\");\r\n          let vt = sessionStorage.getItem(\"v-itm\");\r\n          if (vt) {\r\n            vt = JSON.parse(vt);\r\n            sessionStorage.setItem(\r\n              \"v-itm\",\r\n              JSON.stringify({\r\n                ...vt,\r\n                conversationId: data.data.conversationId,\r\n              }),\r\n            );\r\n          }\r\n        }\r\n        dispatch({\r\n          type: ChatActions.NEW_ADMIN_MESSAGE,\r\n          payload: data.data,\r\n        });\r\n        scrollToBottom();\r\n        setmessage(\"\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const getMessages = () => {\r\n    if (!conversationId) return;\r\n    getAllMessages(conversationId)\r\n      .then((res) => {\r\n        dispatch({ type: ChatActions.SET_MESSAGES, payload: res.data });\r\n        scrollToBottom();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    setTimeout(() => {\r\n      chatBodyRef?.current?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n      });\r\n    }, 300);\r\n  };\r\n\r\n  const setVisitor = () => {\r\n    if (visitor.userName) { \r\n      return;\r\n    }\r\n    if (!visitor.userName) { \r\n      if (!!sessionStorage.getItem(\"v-itm\")) { \r\n        let v = JSON.parse(sessionStorage.getItem(\"v-itm\")); \r\n        dispatch({ type: ChatActions.SET_VISITOR, payload: v });\r\n      } else {\r\n        // set visitor\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageSeen = () => {\r\n    try {\r\n      if (messages.length === 0) return;\r\n      let lastMessage = messages[messages.length - 1];\r\n      if (lastMessage.from === visitor.userName) return;\r\n      markMessageSeen(lastMessage.conversationId, lastMessage.from);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"fae-chat-page-container\">\r\n        <div className=\"chat-card\">\r\n          <div className=\"card-header flex-column\">\r\n            <p>Welcome To Live Chat</p>\r\n            <p>\r\n              <span className=\"bg-dark\"> How can we help you ? </span>\r\n            </p>\r\n            <ProfileAvatar\r\n              profile={{ name: \"Admin\", userName: \"adminSuper\" }}\r\n            />\r\n          </div>\r\n          <div className=\"card-body\">\r\n            {messages.length > 0 &&\r\n              messages.map((msg) =>\r\n                msg.from && msg.from === visitor.userName ? (\r\n                  <SenderMessage message={msg.text} isSeen={msg.status === 1} />\r\n                ) : (\r\n                  <ReceiverMessage message={msg.text} />\r\n                ),\r\n              )}\r\n            <div ref={chatBodyRef}></div>\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <input\r\n              placeholder=\"Type message ...\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={message}\r\n              onFocus={(e) => handleMessageSeen()}\r\n              onKeyPress={(e) => {\r\n                if (e.charCode === 13) {\r\n                  handleMessageSubmit();\r\n                }\r\n              }}\r\n              onChange={(e) => setmessage(e.target.value)}\r\n            />\r\n            <div className=\"buttons-group\">\r\n              <span className=\"mr-auto icon-attachment\">\r\n                <img src={AttachmentSvg} alt=\"attachment\" />\r\n              </span>\r\n              <span\r\n                className=\"ml-auto icon-send\"\r\n                onClick={(e) => handleMessageSubmit(e)}\r\n              >\r\n                <img src={SendSvg} alt=\"send icon\" />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const SenderMessage = ({ message = \"hi\", isSeen = false }) => {\r\n  return (\r\n    <>\r\n      <div className=\"message d-flex flex-column\">\r\n        <div>\r\n          <div className=\"sender\">{message}-9</div>\r\n        </div>\r\n        {isSeen && <span className=\"badge-seen ml-auto\">SEEN</span>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ReceiverMessage = ({ message = \"hi\" }) => {\r\n  return (\r\n    <>\r\n      <div className=\"message\">\r\n        <div className=\"receiver\">{message}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const createVisitor = ({}) => {};\r\n\r\nexport const ProfileAvatar = ({ profile }) => {\r\n  return (\r\n    <div class=\"profile-avatar d-flex\">\r\n      <div class=\"img\">\r\n        <span className=\"active_status_indicator\"></span>\r\n        <img\r\n          src=\"https://png.pngtree.com/png-vector/20200614/ourlarge/pngtree-businessman-user-avatar-character-vector-illustration-png-image_2242909.jpg\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div class=\"username\">\r\n        <p className=\"name\">{profile.name}</p>\r\n        <p className=\"active_label\">Online</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getAdminToken = () => {\r\n  let longtoken = document\r\n    .getElementById(\"widget\")\r\n    .getAttribute(\"src\")\r\n    .split(\"?\")[1];\r\n  longtoken = longtoken?.replace(\"cd=\", \"\");\r\n  var adToken = longtoken.split(\"||\")[0]; \r\n  return adToken;\r\n};\r\n","import { ChatBox } from \"./SupportChatPage\";\r\nexport default ChatBox;\r\n"],"sourceRoot":""}