{"version":3,"sources":["Pages/CreatePasswordPage/CreatePasswordPage.js"],"names":["CreatePasswordPage","_ref","loading","set_new_pass_response","userCountryId","checkNumber_response","verifySMS_response","verify_email_response","sign_in_response","forgotPassoword_response","update_person_info_response","resendSMS_code_response","Do_Empty_signup_reducer_OBJECT_Action","checkMobileNumber","VerifySMSCodeAction","setNewPassword","forgotPassword","setUserId","UpdatePersonInfo","ResendSMSCode","VerifyEmailNewSignup","signInAction","props","_objectWithoutProperties","_excluded","loaderImage","getFileSrcFromPublicFolder","_useState","URLSearchParams","window","location","search","useState","_useState2","_slicedToArray","userIdentification","_useState3","_useState4","password","setPassword","_useState5","_useState6","confirmPassword","setConfirmPassword","_useState7","_useState8","confirmPasswordText","setConfirmPasswordText","_useState9","_useState10","setAuthToken","_useState11","_useState12","loadToken","setLoadToken","_useState13","_useState14","forgotPassFlag","_useState15","_useState16","customerData","_useState17","_useState18","passwordErrors","_useState19","_useState20","confirmPasswordErrors","useLocation","useEffect","interval","setInterval","clearInterval","_location$state","statusCode","history","push","pathname","state","userId","FAEToaster","message","undefined","toaster","dispatch","useDispatch","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","signInSuccesful","_customerData","wrap","_context2","prev","next","objectIsEmpty","console","log","_ref3","_callee","customer","id","_context","setCookies","setTimeout","SocketService","init","localStorage","getItem","concat","JSON","parse","removeItem","t0","sent","t1","stop","_x","apply","arguments","alert","abrupt","handleToken","useCallback","token","useMemo","e","_jsxs","GoogleReCaptchaProvider","reCaptchaKey","children","_jsx","GoogleReCaptcha","onVerify","refreshReCaptcha","_Fragment","className","FAELoading","type","height","screen","width","FAEImage","src","FAETitle","label","logo","FAEText","onSubmit","length","PaswordField","setPasswordValue","target","value","passwordLabel","FAEButton","ToastContainer","connect","_ref4","_ref4$signUpPageReduc","signUpPageReducer","error","defaultReducer","bindActionCreators","memo"],"mappings":"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","file":"static/js/70.c0a5ba2b.chunk.js","sourcesContent":["// react libraries \r\nimport React, { memo, useCallback, useEffect, useState } from 'react'\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha,  } from \"react-google-recaptcha-v3\";\r\nimport { bindActionCreators } from 'redux';\r\n// images components \r\nimport { FAEImage,FAEText, FAELoading, FAETitle } from '@findanexpert-fae/components';\r\nimport 'react-toastify/dist/ReactToastify.css'; \r\n// redux actions and utitlities \r\nimport { FAEToaster, getFileSrcFromPublicFolder, objectIsEmpty, setCookies } from '../../utils';\r\nimport {  checkMobileNumber, Do_Empty_signup_reducer_OBJECT_Action, forgotPassword, getSignUpForm,  ResendSMSCode,  saveSignUpForm,  setNewPassword,  setSignUpResponseToEmpty, signInAction, UpdatePersonInfo, VerifyEmailNewSignup, VerifySMSCodeAction, } from \"../../redux/actions/signUpPageActions\";\r\nimport \"../SIgnUpNewPage/signup.scss\"\r\nimport { connect, useDispatch } from 'react-redux'; \r\nimport history from '../../history';\r\nimport PaswordField from '../../widgets/passwordToLogin'; \r\nimport { FAEButton } from '@findanexpert-fae/components/dist/stories/FAEButton/FAEButton';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useMemo } from 'react';\r\nimport { SocketService } from '../../helpers/socketservice';\r\nimport { setUserId } from '../../redux/actions/defaultActions';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n function CreatePasswordPage({\r\n// reducers \r\n    loading,\r\n    userCountryId,\r\n    checkNumber_response,\r\n    verifySMS_response, \r\n    verify_email_response,\r\n    set_new_pass_response,\r\n    forgotPassoword_response,\r\n    update_person_info_response,\r\n    resendSMS_code_response,\r\n    sign_in_response,\r\n// actions  \r\n    checkMobileNumber,\r\n    VerifySMSCodeAction,\r\n    Do_Empty_signup_reducer_OBJECT_Action,\r\n    forgotPassword,\r\n    setNewPassword,\r\n    UpdatePersonInfo,\r\n    ResendSMSCode,\r\n    VerifyEmailNewSignup,\r\n    signInAction,\r\n    setUserId,\r\n     ...props\r\n }) {\r\n/////////////////////////// variables \r\n    const loaderImage = getFileSrcFromPublicFolder(\"loader_forcomponent.svg\");\r\n    const searchParams=new URLSearchParams(window.location.search) \r\n/////////////////////////// hooks \r\n    const [userIdentification, setUserIdentfication] =useState(\"\") \r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [confirmPasswordText, setConfirmPasswordText] = useState(\"Please missmatching\");\r\n    const [authToken, setAuthToken]= useState(\"\")\r\n    const [loadToken,  setLoadToken]=useState(false) \r\n    const [forgotPassFlag, setForgotPassFlag]= useState(false) \r\n    const [customerData, setCustomerData]= useState({})\r\n    const [passwordErrors, setPaasswordError]= useState()\r\n    const [confirmPasswordErrors, setConfirmPasswordError]=useState() \r\n\r\n    const location =useLocation()\r\n /////////////////////////// use effects \r\n//  useEffect(() => {\r\n \r\n//   if (objectIsEmpty(checkNumber_response)) {\r\n//       history.push(\"/account\")\r\n//   }\r\n// }, []);\r\n\r\n      useEffect(()=>{\r\n        const interval= setInterval(()=>{\r\n              setLoadToken(!loadToken)\r\n            }, 20000)\r\n         return ()=> clearInterval(interval)\r\n      }, [loadToken]) \r\n    \r\n      useEffect(() => {  \r\n         if(set_new_pass_response?.statusCode==0 && forgotPassFlag==false){ \r\n          history.push({ pathname:\"/account?signupstep=profile-information\", state:{userId:location?.state?.userId}})\r\n         }  \r\n\r\n         if( set_new_pass_response?.statusCode==1   ){\r\n          FAEToaster({message:  set_new_pass_response?.message !== undefined && set_new_pass_response?.message  , toaster:\"error\"}\r\n             )\r\n        }\r\n        return ()=> {\r\n          Do_Empty_signup_reducer_OBJECT_Action();\r\n        }\r\n       }, [ set_new_pass_response ]); \r\n\r\n        // sign in\r\n        const {  history: { location: state }} = props;\r\n        const dispatch = useDispatch(); \r\n        useEffect(async () => { \r\n          if (!objectIsEmpty(sign_in_response)  || !objectIsEmpty(set_new_pass_response) || !objectIsEmpty(customerData)) { \r\n            console.log(\"sign_in_response\")\r\n            const signInSuccesful = async (customer) => {\r\n              const { id } = customer; \r\n              await setCookies(\"userId\", id);\r\n              await setCookies(\"customer_details\", customer);\r\n               await setUserId(id);\r\n              setTimeout(() => {\r\n                SocketService.init(dispatch);\r\n              }, 300);\r\n              if (!objectIsEmpty((localStorage.getItem(\"redirectUrl\") !==null && localStorage.getItem(\"redirectUrl\") !==undefined)  ?localStorage.getItem(\"redirectUrl\") :{})) { \r\n                await history.push({\r\n                  pathname: `${localStorage.getItem(\"redirectUrl\")}`,\r\n                  state: JSON.parse(localStorage.getItem(\"stateObject\")),\r\n                });\r\n                await localStorage.removeItem(\"redirectUrl\");\r\n              } else { \r\n                await Do_Empty_signup_reducer_OBJECT_Action();\r\n                (await state.state) !== undefined\r\n                  ? history.push(`${state.state.next}`)\r\n                  : history.push(\"/\");\r\n              }\r\n            };\r\n            const { statusCode, message, customerData } =   set_new_pass_response;\r\n              (await statusCode) !== 0 || statusCode == 2\r\n              ? alert(message)\r\n              : signInSuccesful(customerData);\r\n            await Do_Empty_signup_reducer_OBJECT_Action();\r\n          }\r\n        return ()=> Do_Empty_signup_reducer_OBJECT_Action();\r\n         \r\n        }, [  \r\n          set_new_pass_response, \r\n    ]);\r\n\r\n // /////////////////////////  functions \r\n      const handleToken = useCallback((token) => {\r\n        setAuthToken(token);\r\n      }, [loadToken]);\r\n    \r\n  \r\n// create password handler \r\n     const createPasswordHandle =()=>{\r\n      if(password?.length )\r\n        setNewPassword({ \r\n          userId:userIdentification,\r\n          password \r\n        })\r\n      }\r\n \r\n\r\n  const onChangeConfirmPass=useMemo((e)=>{\r\n      if(confirmPassword==password){\r\n        setConfirmPasswordText(\"\") \r\n      } else{\r\n        setConfirmPasswordText(\"Plase mach your password\") \r\n      }\r\n     }, [confirmPassword])\r\n\r\n\r\n \r\n  \r\n  \r\n     const SkipHandler=()=>{\r\n      history.push(\"/\")\r\n     }\r\n   return (\r\n    <GoogleReCaptchaProvider reCaptchaKey=\"6LfR7U0jAAAAAFOkVZiFzhUq2d2T57juuM8bkI4P\">\r\n       <GoogleReCaptcha onVerify={handleToken} refreshReCaptcha={false} /> \r\n         <>\r\n          <div className=\"fae--new-signup-page-container\" >\r\n            {loading && (\r\n                <FAELoading   type=\"svg\" loaderImage={loaderImage} height=\"630px\" />\r\n                )}\r\n                {/* main head  */}\r\n                 {!loading && (\r\n                  <>\r\n                   <div className=\"loginlogotop\">\r\n                         {window.screen.width>600?\r\n                        <FAEImage className=\"fae-login-desktop-logo\" src={getFileSrcFromPublicFolder(\"expert_logo_full.PNG\")}/>\r\n                        : <>\r\n                            <FAEImage className=\"fae-mobile-logo\" src={getFileSrcFromPublicFolder(\"expert_logo_full.PNG\")}/>\r\n                            <FAETitle\r\n                                className=\"fae-mobile-login-title\"\r\n                                label=\"Expert\"\r\n                                logo={getFileSrcFromPublicFolder(\"title_logo.svg\")}\r\n                            />\r\n                            <FAEText className=\"fae-aaa-text\">AnyService AnyTime AnyWhere</FAEText>\r\n                        </> }\r\n                    </div>\r\n                    \r\n                  {/* main body  context  */}\r\n                    <main>\r\n                      <form onSubmit={createPasswordHandle}>\r\n                            <PaswordField\r\n                              setPasswordValue={(e)=>setPassword(e.target.value)}\r\n                              passwordLabel=\"Please enter your password\" />\r\n                             <span className=\"error\">{passwordErrors}</span>\r\n                            <PaswordField  \r\n                              setPasswordValue={(e)=>setConfirmPassword(e.target.value) }\r\n                              passwordLabel=\"Please confirm your password\" />\r\n                              <span className=\"error\">{confirmPasswordErrors}</span>\r\n                             <FAEText className=\"fae-confirm-Text\">{confirmPasswordText}</FAEText>\r\n                            <FAEButton>Next</FAEButton>\r\n                        </form>\r\n    \r\n                    </main> \r\n               </>  \r\n               )}\r\n          </div>\r\n        </>\r\n        <ToastContainer/>\r\n    </GoogleReCaptchaProvider>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    signUpPageReducer: {\r\n        error,\r\n        loading,\r\n        checkNumber_response,\r\n        verify_email_response,\r\n        set_new_pass_response,\r\n        forgotPassoword_response,\r\n        update_person_info_response,\r\n        resendSMS_code_response,\r\n        verifySMS_response, \r\n\r\n        sign_in_response\r\n      },\r\n      defaultReducer: { userCountryId },\r\n})=>{\r\n    return {\r\n        loading,\r\n        userCountryId,\r\n        checkNumber_response,\r\n        verify_email_response,\r\n        set_new_pass_response,\r\n        forgotPassoword_response,\r\n        update_person_info_response,\r\n        resendSMS_code_response,\r\n        verifySMS_response, \r\n        sign_in_response\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch)=>{\r\n    return bindActionCreators({ \r\n        checkMobileNumber, \r\n        VerifySMSCodeAction,\r\n        ResendSMSCode,\r\n        UpdatePersonInfo,\r\n        forgotPassword,\r\n        setNewPassword,\r\n        VerifyEmailNewSignup,\r\n        Do_Empty_signup_reducer_OBJECT_Action ,\r\n\r\n        signInAction,\r\n        setUserId\r\n    }, dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps )(memo(CreatePasswordPage))"],"sourceRoot":""}