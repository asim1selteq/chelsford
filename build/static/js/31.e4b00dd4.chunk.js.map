{"version":3,"sources":["redux/actions/addressSelectionPageActions.js","redux/actions/dateTimeSelectionPageActions.js","redux/actions/dateTimeSelectionForClinicsActions.js","redux/actions/bookingEditPageActions.js","Pages/DateTimeSelectionForClinics/DateTimeSelectionForClinics.js"],"names":["APP_BASE_URL","process","REACT_APP_BASE_URL","APP_BASE_URL_JDS","REACT_APP_PAYMENT_JDS","getAddresses","_ref","isInClinic","isInHouse","serviceId","userId","selectedDate","selectedTime","radius","addressIdForClinics","fetchAction","type","verb","headers","contentType","endpoint","concat","getAddressesBStatus","_ref2","latitude","longitude","userCountryId","serviceVenu","distance","startTime","endTime","payload","JSON","stringify","bookDate","timeStart","timeEnd","countryId","getUserHomeAddresses","saveAddress","_ref3","addressId","location","cartId","trainingId","voucherId","serviceID","TrainingDetailId","makeNextPageFalse","CheckServiceAvailability","_ref4","PAYMENT_JDS","getAvaliableBookingSlots","bookingDuration","providerId","bookingDate","providersId","duration","saveBookingDateAndTime","bookingId","notes","bookingStartTime","bookingEndTime","bookingTime","tempBookingId","customerNotes","saveBookingDateAndTimeNextTime","makeDateTimeNextPageFalse","getBookingSlots","Date","getHours","length","getMinutes","getFullYear","getMonth","getDate","alternateGetBookingSlots","businessId","tempbookingid","isBusiness","SaveAlternateTempBooking","APP_BASE_URL_CRM","REACT_APP_BASE_URL_2","getEditBookingSlots","currentTime","getSeconds","genderPreference","saveEditedBookingDateTime","customerId","sessionId","isSessionBookingAPI","providerIds","makeBookingEditedToDefault","loaderImage","getFileSrcFromPublicFolder","connect","_ref4$dateTimeSelecti","dateTimeSelectionForClinicsReducer","error","loading","timeSlots","alternatetimeSlots","nextPageDateTimeSelection","_ref4$defaultReducer","defaultReducer","userCountry","dispatch","bindActionCreators","_ref$alternatetimeSlo","service","useParams","serviceName","addSpaces","document","title","state","useLocation","sessionFlag","availableProviderId","console","log","todayDate","_useState","useState","_useState2","_slicedToArray","setSelectedDate","_useState3","_useState4","setSelectedTime","getCookies","useEffect","renameSLotsKeys","map","obj","handleSaveBookingDateAndTime","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_startEndTime$","_startEndTime$2","startEndTime","wrap","_context","prev","next","preventDefault","filter","eachSlot","availablefrom","availableto","t0","sent","history","push","pathname","_objectSpread","stop","_x","apply","arguments","updateBookingDateAndTime","_callee2","_startEndTime$3","_startEndTime$4","_context2","isNaN","parse","alert","_x2","_jsx","_Fragment","children","_jsxs","className","FAETitle","label","logo","FAEDateTimeSelection","loaderForTimeSlots","loaderPropsForTimeSlots","height","getSelectedDate","getSelectedTime","slots","faeBookingTimeSlotsParser","style","display","justifyContent","FAEButton","borderRadius","onClick"],"mappings":"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","file":"static/js/31.e4b00dd4.chunk.js","sourcesContent":["import { fetchAction } from \"../utils\";\r\n\r\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\r\nconst APP_BASE_URL_JDS = process.env.REACT_APP_PAYMENT_JDS;\r\n\r\nexport const getAddresses = ({\r\n  isInClinic,\r\n  isInHouse,\r\n  serviceId,\r\n  userId,\r\n  selectedDate,\r\n  selectedTime,\r\n  radius,\r\n  addressIdForClinics,\r\n}) => {\r\n  return  fetchAction({\r\n        type: \"GET_ADDRESSES_LIST\",\r\n        verb: \"GET\",\r\n        headers: { contentType: \"includeBearer\"},\r\n        endpoint: `${APP_BASE_URL}/Addresses/GetCustomerAddresses/${userId}/true`,\r\n      });\r\n};\r\nexport const getAddressesBStatus = ({ \r\n  serviceId, \r\n  selectedDate,\r\n  selectedTime, \r\n  latitude,\r\n  longitude,\r\n  userCountryId,\r\n  serviceVenu,\r\n  distance,\r\n  startTime, \r\n  endTime,\r\n}) => {\r\n  return   fetchAction({\r\n        type: \"GET_ADDRESSES_FOR_BOOKING\",\r\n        verb: \"POST\",\r\n        endpoint: `${APP_BASE_URL_JDS}/Clinic/GetProvidersInSpecificSlot`,\r\n        payload: JSON.stringify({\r\n\r\n          bookDate: selectedDate,\r\n          timeStart: startTime,\r\n          timeEnd: endTime,\r\n          latitude: latitude,\r\n          longitude: longitude,\r\n          countryId: userCountryId,\r\n          serviceVenu: serviceVenu,\r\n          serviceId: serviceId,\r\n          distance:distance \r\n\r\n          // serviceID: serviceId,\r\n          // userId: parseInt(userId),\r\n          // inhouse: inhouse,\r\n          // inclinic: isInClinic,\r\n          // genderPreference: \"Both\",\r\n          // selectedDate: selectedDate,\r\n          // selectedTime: selectedTime,\r\n          // radius,\r\n          // AddressId: addressIdForClinics,\r\n          // cartId:cartId,\r\n          \r\n        }),\r\n      })\r\n     \r\n};\r\nexport const getUserHomeAddresses = (userId) => {\r\n  return fetchAction({\r\n    type: \"GET_USER_HOME_ADDRESSES\",\r\n    verb: \"GET\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/Addresses/GetCustomerAddresses/${userId}/true`,\r\n  });\r\n};\r\n\r\nexport const saveAddress = ({\r\n  addressId,\r\n  location,\r\n  cartId,\r\n  serviceId,\r\n  userId,\r\n  trainingId,\r\n  voucherId,\r\n}) => {\r\n  return fetchAction({\r\n    type: \"SAVE_ADDRESS_FOR_BOOKING\",\r\n    verb: \"POST\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/SaveTempBooking`,\r\n    payload: JSON.stringify({\r\n      userId: userId,\r\n      serviceID: serviceId,\r\n      addressId: addressId,\r\n      location: location,\r\n      cartId: cartId,\r\n      TrainingDetailId: trainingId,\r\n      voucherId,\r\n    }),\r\n  });\r\n};\r\n\r\nexport const makeNextPageFalse = () => {\r\n  return {\r\n    type: \"MAKE_NEXT_PAGE_FALSE\",\r\n  };\r\n};\r\n\r\nexport const CheckServiceAvailability=({\r\n  serviceId ,\r\n  countryId ,\r\n  latitude ,\r\n  longitude ,\r\n})=>{\r\n  return fetchAction({\r\n    type: \"CHECK_SERVICES_AVAILABILITY\",\r\n    verb: \"POST\",\r\n    endpoint: `${APP_BASE_URL_JDS}/ServiceAvailability/CheckServiceAvailability`,\r\n    payload: JSON.stringify({\r\n       serviceId : serviceId,\r\n       countryId : countryId,\r\n       latitude : `${latitude}`,\r\n       longitude : `${longitude}`,\r\n       serviceVenu : 2\r\n    }),\r\n  });\r\n}","import { fetchAction } from \"../utils\";\r\n\r\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\r\nconst PAYMENT_JDS = process.env.REACT_APP_PAYMENT_JDS\r\nexport const getAvaliableBookingSlots = ({\r\n  selectedDate, \r\n  serviceId, \r\n  bookingDuration,\r\n  providerId, \r\n}) => {\r\n  return fetchAction({\r\n    type: \"GET_BOOKING_SLOTS_INHOUSE\",\r\n    endpoint: `${PAYMENT_JDS}/TimeSlots/GetTimeSlots`,\r\n    payload: JSON.stringify({ \r\n         bookingDate :selectedDate,\r\n         serviceId :serviceId,\r\n         providersId :providerId,\r\n         duration :bookingDuration  \r\n    }),\r\n    verb: \"POST\",\r\n  });\r\n};\r\n\r\nexport const saveBookingDateAndTime = ({\r\n  selectedDate,\r\n  selectedTime,\r\n  bookingId,\r\n  cartId,\r\n  notes,\r\n  bookingStartTime,\r\n  bookingEndTime,\r\n  addressId\r\n}) => {\r\n  return fetchAction({\r\n    type: \"SAVE_DATE_AND_TIME\",\r\n    verb: \"POST\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/SaveTempBooking`,\r\n    payload: JSON.stringify({\r\n      bookingDate: selectedDate,\r\n      bookingTime: selectedTime,\r\n      tempBookingId: bookingId,\r\n      cartId: cartId,\r\n      customerNotes: notes,\r\n    }),\r\n  });\r\n}; \r\n\r\n\r\nexport const saveBookingDateAndTimeNextTime = ({\r\n  selectedDate, \r\n  cartId, \r\n  bookingStartTime,\r\n  bookingEndTime,\r\n  addressId \r\n}) => { \r\n\r\n  return fetchAction({\r\n    type: \"SAVE_DATE_AND_TIME\",\r\n    verb: \"PUT\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/BookingDateTime`,\r\n    payload: JSON.stringify({ \r\n        cartId: cartId,\r\n        bookingDate: selectedDate,\r\n        bookingStartTime: bookingStartTime,\r\n        bookingEndTime: bookingEndTime,\r\n        addressId:addressId\r\n    }),\r\n  });\r\n}; \r\nexport const makeDateTimeNextPageFalse = () => {\r\n  return {\r\n    type: \"MAKE_DATE_TIME_NEXT_PAGE_FALSE\",\r\n  };\r\n};\r\n","import moment from \"moment\";\r\nimport { fetchAction } from \"../utils\";\r\n\r\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\r\nconst APP_BASE_URL_JDS = process.env.REACT_APP_PAYMENT_JDS;\r\n\r\nexport const getBookingSlots = ({\r\n  selectedDate, \r\n  serviceId,\r\n  latitude,\r\n  longitude,\r\n  countryId,\r\n  duration,\r\n  distance,\r\n  serviceVenu,\r\n   \r\n}) => {\r\n \r\n const convertTime12to24 = (time12h) => {\r\n    const [time, modifier] = time12h.split(' '); \r\n    let [hours, minutes] = time.split(':'); \r\n    if (hours === '12') {\r\n      hours = '00';\r\n    } \r\n    if (modifier === 'PM') {\r\n      hours = parseInt(hours, 10) + 12;\r\n    } \r\n    return `${hours}:${minutes}`;\r\n  }\r\n\r\n  var currentTime =  `${\r\n    `${new Date().getHours()}`.length === 1\r\n      ? `0${new Date().getHours()}`\r\n      : new Date().getHours()\r\n  }:${\r\n    `${new Date().getMinutes()}`.length === 1\r\n      ? `0${new Date().getMinutes()}`\r\n      : new Date().getMinutes()\r\n  }`;\r\n  \r\n  const currentDateAndTime= \r\n  `${new Date().getFullYear()}-${\r\n    `${new Date().getMonth() + 1}`.length === 1\r\n      ? `0${new Date().getMonth() + 1}`\r\n      : new Date().getMonth() + 1\r\n  }-${\r\n    `${new Date().getDate()}`.length === 1\r\n      ? `0${new Date().getDate()}`\r\n      : new Date().getDate()\r\n  }`\r\n  return fetchAction({\r\n    type: \"GET_BOOKING_SLOTS_DATA\",\r\n    endpoint: `${APP_BASE_URL_JDS}/Clinic/CreateTimeSlots`,\r\n\r\n    payload: JSON.stringify({\r\n          bookingDate: selectedDate,\r\n          latitude: latitude,\r\n          longitude: longitude,\r\n          distance: distance,\r\n          countryId: countryId,\r\n          serviceId: serviceId,\r\n          duration: duration,\r\n          serviceVenu: serviceVenu \r\n    }),\r\n    verb: \"POST\",\r\n  });\r\n};\r\n\r\n \r\n\r\nexport const makeDateTimeNextPageFalse = () => {\r\n  return {\r\n    type: \"MAKE_DATE_TIME_NEXT_PAGE_FALSE\",\r\n  };\r\n};\r\n\r\n// alternate action of get slot \r\nexport const alternateGetBookingSlots = ({\r\n  selectedDate,\r\n  providerId,\r\n  isInClinic,\r\n  duration,\r\n  cartId,\r\n  serviceId,\r\n  tempbookingid, \r\n  isBusiness,\r\n  businessId,\r\n  serviceVenu\r\n}) => {\r\n    \r\n  return fetchAction({\r\n    type: \"GET_ALTERNATE_BOOKING_SLOTS_DATA\",\r\n    endpoint: `${APP_BASE_URL_JDS}/Clinic/CreateTimeSlotsForBusiness`,\r\n    payload:  JSON.stringify({ \r\n      businessId: businessId,\r\n      bookingDate: selectedDate,\r\n      serviceId: serviceId,\r\n      duration: duration,\r\n      serviceVenu:serviceVenu, \r\n        }), \r\n    verb: \"POST\",\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const SaveAlternateTempBooking = ({ \r\n tempBookingId,\r\n addressId ,\r\n cartId ,\r\n bookingDate,\r\n bookingTime,\r\n customerNotes\r\n}) => { \r\n  return fetchAction({\r\n    type: \"SAVE_ALTERNET_BOOKING\",\r\n    verb: \"POST\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/SaveTempBooking`,\r\n    payload: JSON.stringify({\r\n        tempBookingId: tempBookingId,\r\n        addressId: addressId,\r\n        cartId:cartId,\r\n        bookingDate: bookingDate,\r\n        bookingTime:bookingTime,\r\n        customerNotes:customerNotes\r\n    }),\r\n  });\r\n};\r\n\r\n","import { fetchAction } from \"../utils\";\r\n\r\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\r\nconst APP_BASE_URL_CRM = process.env.REACT_APP_BASE_URL_2\r\nexport const getEditBookingSlots = ({\r\n  selectedDate,\r\n  providerId,\r\n  isInClinic,\r\n  duration,\r\n  cartId,\r\n  serviceId,\r\n  tempbookingid, \r\n  isBusiness,\r\n  businessId\r\n}) => { \r\n\r\n\r\n  return fetchAction({\r\n    type: \"GET_EDIT_BOOKING_SLOTS_DATA\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/Providers/CheckExpertAvailableSlots`,\r\n    payload:  JSON.stringify({\r\n          bookingDate: selectedDate,\r\n          bookingDuration:duration,\r\n          currentTime: `${new Date().getFullYear()}-${\r\n              new Date().getMonth() + 1\r\n            }-${new Date().getDate()} ${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n          genderPreference:\"both\",  \r\n          isBusiness:false,\r\n          isInClinic: isInClinic,\r\n          providerId: providerId,\r\n          serviceId: serviceId,\r\n          tempBookingId:tempbookingid,\r\n          cartId:cartId\r\n        }),\r\n       \r\n    verb: \"POST\",\r\n  });\r\n};\r\n\r\nexport const saveEditedBookingDateTime = ({\r\n  selectedDate,\r\n  selectedTime,\r\n  bookingId,\r\n  cartId,\r\n  userId,\r\n  providerId,\r\n  customerId,\r\n  endTime,\r\n  startTime,\r\n  sessionId,\r\n  isSessionBookingAPI,\r\n  latitude,\r\n  longitude,\r\n   duration,\r\n   serviceId,\r\n  serviceVenu,\r\n}) => {\r\n  return fetchAction({\r\n    type: \"SAVE_EDITED_DATE_AND_TIME\",\r\n    verb: \"POST\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    // endpoint: isSessionBookingAPI? `${APP_BASE_URL}/Booking/SessionBooking`: `${APP_BASE_URL}/Booking/UpdateBooking` ,\r\n    endpoint: `${APP_BASE_URL_CRM}/Booking/UpdateBookingJds`,\r\n    payload: \r\n    JSON.stringify({\r\n         bookingId : bookingId,\r\n         sessionId : sessionId,\r\n         customerId : customerId,\r\n         providerIds :  `${providerId}`,\r\n         bookingDate : selectedDate,\r\n         startTime : startTime,\r\n         endTime : endTime,\r\n         distance : 20,\r\n         latitude : `${latitude}`,\r\n         longitude : `${longitude}` ,\r\n         duration:duration,\r\n         serviceId:serviceId,\r\n         serviceVenu:serviceVenu,\r\n         \r\n    }), \r\n  //  JSON.stringify({\r\n  //   providerId:providerId,\r\n  //   bookingDate:selectedDate,\r\n  //   bookingId:bookingId,\r\n  //   customerId:customerId,\r\n  //   endTime:endTime,\r\n  //   startTime:startTime, \r\n  //   sessionId:sessionId, \r\n  // })\r\n});\r\n};\r\n\r\nexport const makeBookingEditedToDefault = () => {\r\n  return {\r\n    type: \"MAKE_EDITED_DATE_TIME_NEXT_PAGE_FALSE\",\r\n  };\r\n};\r\n","//libs\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  FAEDateTimeSelection,\r\n  FAEButton,\r\n  FAETitle,\r\n} from \"@findanexpert-fae/components\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n\r\n//src\r\nimport {\r\n  getBookingSlots,\r\n  makeDateTimeNextPageFalse, \r\n    alternateGetBookingSlots,\r\n    SaveAlternateTempBooking,\r\n    \r\n} from \"../../redux/actions/dateTimeSelectionForClinicsActions\";\r\nimport {saveBookingDateAndTimeNextTime} from \"../../redux/actions/dateTimeSelectionPageActions\"\r\nimport {   saveAddress, } from \"../../redux/actions/addressSelectionPageActions\";\r\nimport { addSpaces, getCookies, getFileSrcFromPublicFolder } from \"../../utils\";\r\nimport { faeBookingTimeSlotsParser } from \"../../parsers\";\r\nimport history from \"../../history\";\r\n\r\n//scss\r\nimport \"./DateTimeSelectionForClinics.scss\"; \r\nimport { saveEditedBookingDateTime } from \"../../redux/actions/bookingEditPageActions\";\r\n\r\nconst loaderImage = getFileSrcFromPublicFolder(\"loader.GIF\");\r\n\r\nconst DateTimeSelectionForClinics = ({\r\n  loading, \r\n  timeSlots = [],\r\n  alternatetimeSlots= [],\r\n  getBookingSlots, \r\n  makeDateTimeNextPageFalse, \r\n  alternateGetBookingSlots, \r\n  saveAddress,\r\n  saveBookingDateAndTimeNextTime,\r\n  saveEditedBookingDateTime,\r\n  userCountry,\r\n  \r\n}) => {\r\n  const { service } = useParams();\r\n  const serviceName =   addSpaces(service, \"-\") ;\r\n  document.title = `Chelsford | ${serviceName} - Schedule`;\r\n  const location = useLocation();\r\n  const { state } = location; \r\n  const {\r\n    serviceId,\r\n    isInHouse,\r\n    isInClinic,\r\n    duration,\r\n    bookingId,\r\n    cartId, \r\n    voucherId,\r\n    addressId, \r\n    sessionFlag, \r\n    providerId,\r\n    notes,\r\n    sessionId,\r\n    availableProviderId,\r\n    businessId,\r\n    latitude,\r\n    longitude\r\n  } = state; \r\n  console.log(state, 'state')\r\n  const todayDate= `${new Date().getFullYear()}-${\r\n    `${new Date().getMonth() + 1}`.length === 1\r\n      ? `0${new Date().getMonth() + 1}`\r\n      : new Date().getMonth() + 1\r\n  }-${\r\n    `${new Date().getDate()}`.length === 1\r\n      ? `0${new Date().getDate()}`\r\n      : new Date().getDate()\r\n  }`\r\n  const [selectedDate, setSelectedDate] = useState(todayDate);\r\n  const [selectedTime, setSelectedTime] = useState(\"\");\r\n  const userId= getCookies(\"userId\")\r\n  useEffect(() => {\r\n    setSelectedTime(\"\"); \r\n    if (selectedDate !== \"\") {\r\n      alternateGetBookingSlots({\r\n          businessId: businessId,\r\n          selectedDate,\r\n          serviceId: serviceId,\r\n          duration: duration, \r\n          serviceVenu: isInClinic ? 2 : 1\r\n      })  \r\n    }\r\n  }, [\r\n    duration,\r\n    getBookingSlots,\r\n    isInClinic,\r\n    isInHouse,\r\n    selectedDate,\r\n    serviceId,\r\n  ]);\r\n\r\n  const renameSLotsKeys= alternatetimeSlots.map((obj)=>{\r\n    obj['availablefrom'] = obj['timeStart'];\r\n    obj['availableto'] = obj['timeEnd'];\r\n   return obj\r\n  }); \r\n  // generate temp booking and cart id  \r\n  const handleSaveBookingDateAndTime = async (e) => {\r\n    e.preventDefault();\r\n    const startEndTime= renameSLotsKeys.filter((eachSlot)=>eachSlot.availablefrom==selectedTime)\r\n    const startTime= startEndTime[0]?.availablefrom;\r\n    const endTime= startEndTime[0]?.availableto\r\n    await saveBookingDateAndTimeNextTime({\r\n          selectedDate, \r\n          cartId: cartId, \r\n          bookingStartTime:startTime,\r\n          bookingEndTime:endTime,\r\n          addressId: addressId,\r\n        })\r\n    await  addressId && history.push({\r\n      pathname: \r\n        `/booking/${service}/summary`, \r\n        state: {\r\n          ...state,\r\n          bookingId: bookingId,\r\n          cartId: cartId, \r\n          selectedDate,\r\n          selectedTime, \r\n          availableProviderId:providerId\r\n        },\r\n    });\r\n    await makeDateTimeNextPageFalse(); \r\n  }; \r\n \r\n  const updateBookingDateAndTime = async (e) => {\r\n      e.preventDefault();\r\n      const startEndTime= renameSLotsKeys.filter((eachSlot)=>eachSlot.availablefrom==selectedTime)\r\n      const startTime= startEndTime[0]?.availablefrom;\r\n      const endTime= startEndTime[0]?.availableto\r\n     \r\n  if(providerId !==0){\r\n      saveEditedBookingDateTime({\r\n         bookingId:bookingId,\r\n         providerId: providerId,\r\n         selectedDate,selectedTime, \r\n         customerId:!isNaN(userId)?JSON.parse(userId):userId, \r\n         endTime:endTime,\r\n         startTime:startTime ,\r\n         sessionId:sessionId,\r\n         isSessionBookingAPI:true,\r\n         latitude:latitude,\r\n         longitude:longitude, \r\n         duration:duration,\r\n         serviceId:serviceId,\r\n         serviceVenu:isInClinic?2:1,\r\n        })\r\n       }else {\r\n        alert(\"Provider not found.\")\r\n      }\r\n    await sessionFlag && history.push(\"/your-bookings/session\") \r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"fae--date-time-selection-main-container dpt dpb\">\r\n        <FAETitle\r\n          label={serviceName}\r\n          logo={getFileSrcFromPublicFolder(\"title_logo.svg\")}\r\n        />\r\n        <FAEDateTimeSelection\r\n          className=\"fae-date-time-selection-container-width\"\r\n          loaderForTimeSlots={loading}\r\n          loaderPropsForTimeSlots={{\r\n            loaderImage,\r\n            height: \"200px\",\r\n            type: \"video\",\r\n          }}\r\n          getSelectedDate={setSelectedDate}\r\n          getSelectedTime={setSelectedTime}\r\n          slots={faeBookingTimeSlotsParser(renameSLotsKeys)}\r\n        />\r\n        {selectedTime !== \"\" && (\r\n         <><div\r\n            style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            className=\"dpb\" >\r\n           {!sessionFlag  && <FAEButton\r\n              className=\"fae--date-time-selection-button\"\r\n              style={{ borderRadius: \"4px\" }}\r\n              onClick={handleSaveBookingDateAndTime} >\r\n               Next\r\n            </FAEButton>}\r\n          {sessionFlag  && <FAEButton\r\n            className=\"fae--date-time-selection-button\"\r\n            style={{ borderRadius: \"4px\" }}\r\n            onClick={updateBookingDateAndTime}\r\n          >\r\n            Save\r\n          </FAEButton>\r\n          }\r\n           </div>\r\n          </>\r\n        )}\r\n\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({\r\n  dateTimeSelectionForClinicsReducer: {\r\n    error,\r\n    loading,\r\n    timeSlots,\r\n    alternatetimeSlots, \r\n    nextPageDateTimeSelection,\r\n  },defaultReducer: {userId, userCountry}\r\n  \r\n}) => ({\r\n  error,\r\n  loading,\r\n  timeSlots,\r\n  alternatetimeSlots,\r\n  nextPageDateTimeSelection,\r\n  userCountry\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      getBookingSlots,\r\n      // saveBookingDateAndTime,\r\n      makeDateTimeNextPageFalse,\r\n      alternateGetBookingSlots,\r\n      SaveAlternateTempBooking,\r\n      saveAddress,\r\n      saveBookingDateAndTimeNextTime,\r\n      saveEditedBookingDateTime\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DateTimeSelectionForClinics);\r\n\r\n\r\n"],"sourceRoot":""}