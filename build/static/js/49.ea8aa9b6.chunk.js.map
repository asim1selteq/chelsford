{"version":3,"sources":["redux/actions/addressSelectionPageActions.js","Pages/AddressSelectionPage/AddressSelectionPage.js"],"names":["APP_BASE_URL","process","REACT_APP_BASE_URL","APP_BASE_URL_JDS","REACT_APP_PAYMENT_JDS","getAddresses","_ref","isInClinic","isInHouse","serviceId","userId","selectedDate","selectedTime","radius","addressIdForClinics","fetchAction","type","verb","headers","contentType","endpoint","concat","getAddressesBStatus","_ref2","latitude","longitude","userCountryId","serviceVenu","distance","startTime","endTime","payload","JSON","stringify","bookDate","timeStart","timeEnd","countryId","getUserHomeAddresses","saveAddress","_ref3","addressId","location","cartId","trainingId","voucherId","serviceID","TrainingDetailId","makeNextPageFalse","CheckServiceAvailability","_ref4","connect","REACT_APP_GOOGLE_MAP_API_KEY","_ref3$addressSelectio","addressSelectionPageReducer","error","loading","addresses","bookingId","nextPage","userHomeAddresses","dispatch","bindActionCreators","loaderImage","getFileSrcFromPublicFolder","notesIcon","_useState","useState","_useState2","_slicedToArray","open","setOpen","_useState3","_useState4","content","setContent","_useState5","_useState6","dialogueBoxTitle","setDialogueBoxTitle","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","latLanObject","setUbdateObjec","service","useParams","serviceName","addSpaces","document","title","useLocation","state","pathname","useSelector","hasAttributes","price","freeConsultation","currencySymbol","pathValue","useEffect","getCookies","history","push","_objectSpread","handleAddressSelection","_asyncToGenerator","_regeneratorRuntime","mark","_callee","status","id","userID","wrap","_context","prev","next","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","doPadding","length","paddingBottom","_jsxs","_Fragment","children","_jsx","className","style","FAETitle","label","logo","FAEFloatingBookingPrice","justify","backgroundImage","FAEText","FAELoading","height","Children","toArray","map","userAddress","_userAddress$line","line1","line2","townCity","postalCode","address","FAEShadowBox","primary","onClick","paragraph","tertiary","e","stopPropagation","src","alt","width","Array","isArray","subHeading","textAlign","FAEButton","redirectedUrl","borderRadius","FAEDialogueBox","buttons"],"mappings":"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","file":"static/js/49.ea8aa9b6.chunk.js","sourcesContent":["import { fetchAction } from \"../utils\";\r\n\r\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\r\nconst APP_BASE_URL_JDS = process.env.REACT_APP_PAYMENT_JDS;\r\n\r\nexport const getAddresses = ({\r\n  isInClinic,\r\n  isInHouse,\r\n  serviceId,\r\n  userId,\r\n  selectedDate,\r\n  selectedTime,\r\n  radius,\r\n  addressIdForClinics,\r\n}) => {\r\n  return  fetchAction({\r\n        type: \"GET_ADDRESSES_LIST\",\r\n        verb: \"GET\",\r\n        headers: { contentType: \"includeBearer\"},\r\n        endpoint: `${APP_BASE_URL}/Addresses/GetCustomerAddresses/${userId}/true`,\r\n      });\r\n};\r\nexport const getAddressesBStatus = ({ \r\n  serviceId, \r\n  selectedDate,\r\n  selectedTime, \r\n  latitude,\r\n  longitude,\r\n  userCountryId,\r\n  serviceVenu,\r\n  distance,\r\n  startTime, \r\n  endTime,\r\n}) => {\r\n  return   fetchAction({\r\n        type: \"GET_ADDRESSES_FOR_BOOKING\",\r\n        verb: \"POST\",\r\n        endpoint: `${APP_BASE_URL_JDS}/Clinic/GetProvidersInSpecificSlot`,\r\n        payload: JSON.stringify({\r\n\r\n          bookDate: selectedDate,\r\n          timeStart: startTime,\r\n          timeEnd: endTime,\r\n          latitude: latitude,\r\n          longitude: longitude,\r\n          countryId: userCountryId,\r\n          serviceVenu: serviceVenu,\r\n          serviceId: serviceId,\r\n          distance:distance \r\n\r\n          // serviceID: serviceId,\r\n          // userId: parseInt(userId),\r\n          // inhouse: inhouse,\r\n          // inclinic: isInClinic,\r\n          // genderPreference: \"Both\",\r\n          // selectedDate: selectedDate,\r\n          // selectedTime: selectedTime,\r\n          // radius,\r\n          // AddressId: addressIdForClinics,\r\n          // cartId:cartId,\r\n          \r\n        }),\r\n      })\r\n     \r\n};\r\nexport const getUserHomeAddresses = (userId) => {\r\n  return fetchAction({\r\n    type: \"GET_USER_HOME_ADDRESSES\",\r\n    verb: \"GET\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/Addresses/GetCustomerAddresses/${userId}/true`,\r\n  });\r\n};\r\n\r\nexport const saveAddress = ({\r\n  addressId,\r\n  location,\r\n  cartId,\r\n  serviceId,\r\n  userId,\r\n  trainingId,\r\n  voucherId,\r\n}) => {\r\n  return fetchAction({\r\n    type: \"SAVE_ADDRESS_FOR_BOOKING\",\r\n    verb: \"POST\",\r\n    headers: { contentType: \"includeBearer\"},\r\n    endpoint: `${APP_BASE_URL}/TempBooking/SaveTempBooking`,\r\n    payload: JSON.stringify({\r\n      userId: userId,\r\n      serviceID: serviceId,\r\n      addressId: addressId,\r\n      location: location,\r\n      cartId: cartId,\r\n      TrainingDetailId: trainingId,\r\n      voucherId,\r\n    }),\r\n  });\r\n};\r\n\r\nexport const makeNextPageFalse = () => {\r\n  return {\r\n    type: \"MAKE_NEXT_PAGE_FALSE\",\r\n  };\r\n};\r\n\r\nexport const CheckServiceAvailability=({\r\n  serviceId ,\r\n  countryId ,\r\n  latitude ,\r\n  longitude ,\r\n})=>{\r\n  return fetchAction({\r\n    type: \"CHECK_SERVICES_AVAILABILITY\",\r\n    verb: \"POST\",\r\n    endpoint: `${APP_BASE_URL_JDS}/ServiceAvailability/CheckServiceAvailability`,\r\n    payload: JSON.stringify({\r\n       serviceId : serviceId,\r\n       countryId : countryId,\r\n       latitude : `${latitude}`,\r\n       longitude : `${longitude}`,\r\n       serviceVenu : 2\r\n    }),\r\n  });\r\n}","//libs\r\nimport React, { useEffect, Children, useState } from \"react\";\r\nimport {\r\n  FAETitle,\r\n  FAEFloatingBookingPrice,\r\n  // FAEAddressSelection,\r\n  FAEButton,\r\n  FAEText,\r\n  FAELoading,\r\n  FAEShadowBox,\r\n  FAEDialogueBox, \r\n} from \"@findanexpert-fae/components\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect, useSelector } from \"react-redux\";\r\n\r\n//src\r\nimport { addSpaces, getCookies, getFileSrcFromPublicFolder } from \"../../utils\";\r\nimport {\r\n  getAddresses,\r\n  getUserHomeAddresses,\r\n  makeNextPageFalse,\r\n  saveAddress,\r\n} from \"../../redux/actions/addressSelectionPageActions\"; \r\nimport history from \"../../history\";\r\n\r\n//scss\r\nimport \"./AddressSelectionPage.scss\";\r\n\r\n\r\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_API_KEY;\r\n\r\nconst AddressSelectionPage = ({\r\n  getAddresses,\r\n  addresses, \r\n  loading,\r\n  bookingId,\r\n  saveAddress,\r\n  cartId,\r\n  nextPage,\r\n  makeNextPageFalse,\r\n  getUserHomeAddresses,\r\n  userHomeAddresses,\r\n  addressSelectionPageReducer\r\n}) => {\r\n  const loaderImage = getFileSrcFromPublicFolder(\"loader.GIF\"); \r\n  const notesIcon = getFileSrcFromPublicFolder(\"notes_svg.svg\");\r\n  const [open, setOpen] = useState(false);\r\n  const [content, setContent] = useState(\"\");\r\n  const [dialogueBoxTitle, setDialogueBoxTitle] = useState(\"\");\r\n  const [radius, setRadius] = useState(5);\r\n  const [addressIdForClinics, setAddressIdForClinics] = useState(0);\r\n  const [latLanObject, setUbdateObjec]=useState({})\r\n  const { service } = useParams();\r\n  const serviceName = addSpaces(service, \"-\");\r\n  document.title = `Chelsford | ${serviceName} - Select Address`;\r\n  const location = useLocation();\r\n  const { state, pathname } = location;\r\n  const store= useSelector(state=>state)\r\n  const {\r\n    serviceId,\r\n    isInClinic,\r\n    isInHouse,\r\n    hasAttributes,\r\n    price,\r\n    freeConsultation,\r\n    currencySymbol,\r\n    voucherId,\r\n    selectedTime,\r\n    selectedDate,\r\n    pathValue,\r\n  } = state; \r\n  useEffect(() => {\r\n  //  state.isInClinic=false\r\n    getAddresses({\r\n      serviceId,\r\n      isInClinic,\r\n      isInHouse,\r\n      userId: getCookies(\"userId\"),\r\n      selectedTime,\r\n      selectedDate,\r\n      radius,\r\n      addressIdForClinics,\r\n    });\r\n  }, [\r\n    addressIdForClinics,\r\n    getAddresses,\r\n    isInClinic,\r\n    radius,\r\n    selectedDate,\r\n    selectedTime,\r\n    serviceId,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    getUserHomeAddresses(getCookies(\"userId\"));\r\n  }, [getUserHomeAddresses]);\r\n\r\n  useEffect(() => {\r\n    if (nextPage) {\r\n      makeNextPageFalse();\r\n      history.push({\r\n        pathname: \r\n          `/booking/${service}/attributes`, \r\n        state: {\r\n          ...state,\r\n          bookingId: bookingId,\r\n          cartId: cartId,\r\n          price,\r\n          selectedDate,\r\n          selectedTime,\r\n          ...latLanObject\r\n        },\r\n      });\r\n    }\r\n  }, [\r\n    bookingId,\r\n    cartId,\r\n    freeConsultation,\r\n    hasAttributes,\r\n    makeNextPageFalse,\r\n    nextPage,\r\n    price,\r\n    selectedDate,\r\n    selectedTime,\r\n    service,\r\n    state,\r\n  ]);\r\n\r\n  const handleAddressSelection = async (status,id, userID, latitude, longitude) => {\r\n      await setUbdateObjec({id:id, latitude:latitude, longitude:longitude})\r\n      await  saveAddress({\r\n            addressId: id,\r\n            location: isInClinic ? \"inclinic\" : \"inhouse\",\r\n            serviceId,\r\n            userId: getCookies(\"userId\"),\r\n            cartId: \"\",\r\n            voucherId,\r\n        });  \r\n  };\r\n \r\n  const doPadding= addresses?.length<4 ?(addresses.length==1 ?{paddingBottom: 254}:{paddingBottom: 250}): {paddingBottom: 40}\r\n  return (\r\n    <> \r\n      <div className=\"fae--service-location-page-container dpt dpb\" style={doPadding}>\r\n        <div className=\"fae--service-location-page-wrapper\" >\r\n          <FAETitle\r\n            label={serviceName}\r\n            logo={getFileSrcFromPublicFolder(\"title_logo.svg\")}\r\n          />\r\n          {!freeConsultation && (\r\n            <FAEFloatingBookingPrice\r\n              currencySymbol={currencySymbol}\r\n              justify=\"flex-end\"\r\n              price={price}\r\n              backgroundImage={getFileSrcFromPublicFolder(\"parchii_icon.svg\")}\r\n            /> \r\n          )}\r\n          {isInClinic && (\r\n           <FAEText className=\"line-break fae--all-addresses-page-original-address fae-address-selection-msg\">\r\n             Choose your desired address from where you want to get nearest clinic addresses  \r\n           </FAEText> ) }\r\n  \r\n           <FAEText className=\"line-break fae--all-addresses-page-original-address fae-address-selection-second-msg\">\r\n             I want my service at\r\n           </FAEText> \r\n          {loading && (\r\n            <FAELoading type=\"svg\" loaderImage={loaderImage} height=\"200px\" />\r\n          )} \r\n          {!loading && (\r\n            <div className=\"fae--all-addresses-addresses-wrapper\">\r\n\r\n              {addresses && Children.toArray(\r\n                addresses?.map((userAddress) => {\r\n                  const {\r\n                    line1 = \"\",\r\n                    line2,\r\n                    townCity,\r\n                    postalCode,\r\n                    address,\r\n                    id, \r\n                    userID, \r\n                    longitude,\r\n                    latitude\r\n                  } = userAddress; \r\n                  return  (\r\n                    <FAEShadowBox\r\n                      primary\r\n                      className=\"fae--all-addresses-adrress-bar-wrapper pointer\"\r\n                      onClick={() =>{ handleAddressSelection('', id, userID, latitude, longitude); }}  >\r\n\r\n                      <FAEText\r\n                        className=\"fae--all-addresses-page-original-address fae-address-title\"\r\n                        paragraph\r\n                        tertiary\r\n                      >\r\n                        {line1}\r\n                      </FAEText>\r\n                      <div>\r\n                        <FAEText className=\"fae--all-addresses-page-original-address\">\r\n                          {line2}\r\n                        </FAEText>\r\n                        <FAEText className=\"fae--all-addresses-page-original-address\">\r\n                          {townCity}\r\n                        </FAEText>\r\n                        <FAEText className=\"fae--all-addresses-page-original-address\">\r\n                          {postalCode}\r\n                        </FAEText>\r\n                      </div>\r\n                      <FAEText\r\n                        className=\"fae--all-addresses-notes-text pointer\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          setOpen(true);\r\n                          setContent(address);\r\n                          setDialogueBoxTitle(\"Address Notes\");\r\n                        }}\r\n                        paragraph\r\n                        tertiary\r\n                      >\r\n                        <img\r\n                          className=\"fae--all-addresses-action-icon\"\r\n                          src={notesIcon}\r\n                          alt=\"notes_icon\"\r\n                          width=\"auto\"\r\n                          height=\"auto\"\r\n                        />\r\n                        Address Notes\r\n                      </FAEText>\r\n                    </FAEShadowBox>\r\n                  );\r\n                })\r\n              )}\r\n             {!loading && Array.isArray(addresses)? (addresses.length ==0? <FAEText className=\"ResultEmpty\" subHeading style={{textAlign: \"center\"}}> <img src={getFileSrcFromPublicFolder(\"result not found-img.png\")} /></FAEText>:\"\"):\"\"}\r\n            </div>\r\n          )  }\r\n        <FAEButton\r\n            onClick={() =>\r\n              history.push({\r\n                pathname: \"/your-addresses/add\",\r\n                 state: { ...state, redirectedUrl: pathname },\r\n               })\r\n             }\r\n             style={{ borderRadius: \"4px\" }}\r\n            >\r\n           + Add Address\r\n          </FAEButton> \r\n        </div>\r\n      </div>\r\n      <FAEDialogueBox\r\n        title={dialogueBoxTitle}\r\n        open={open}\r\n        content={content.length !==0?content: \"Address Notes not available\"}\r\n        buttons={[\r\n          {\r\n            label: \"Ok\",\r\n            onClick: () => setOpen(false),\r\n          },\r\n        ]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({\r\n  addressSelectionPageReducer: {\r\n    error,\r\n    loading,\r\n    addresses,\r\n    bookingId,\r\n    cartId,\r\n    nextPage,\r\n    userHomeAddresses,\r\n  } \r\n}) => ({\r\n    error,\r\n    loading,\r\n    addresses,\r\n    bookingId,\r\n    cartId,\r\n    nextPage,\r\n    userHomeAddresses, \r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      getAddresses,\r\n      saveAddress,\r\n      makeNextPageFalse,\r\n      getUserHomeAddresses,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddressSelectionPage);\r\n"],"sourceRoot":""}