{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","Pages/ChatPage/CustomerChatPage.js"],"names":["_objectDestructuringEmpty","obj","TypeError","AttachmentSvg","getFileSrcFromPublicFolder","SendSvg","SenderMessage","_ref","_ref$message","message","status","_jsx","_Fragment","children","className","ReceiverMessage","_ref2","_ref2$message","_ref2$status","_jsxs","createVisitor","_ref3","ProfileAvatar","_ref4","profile","class","src","alt","name","CustomerChatBox","props","state","location","_useState","useState","_useState2","_slicedToArray","setmessage","id","getCookies","messages","useSelector","_state","customerChatReducer","filter","msg","_state$conversation","_state$conversation2","conversation","conversationId","dispatch","useDispatch","chatBodyRef","useRef","useEffect","getMessages","handleMessageSubmit","trim","sendMessageToProvider","customerId","text","providerId","then","data","type","customerChatActions","NEW_MESSAGE","payload","scrollToBottom","catch","err","console","log","_state$conversation3","getAllMessages","res","SET_MESSAGES_LIST","setTimeout","_chatBodyRef$current","current","scrollIntoView","behavior","block","serviceTypeName","providerName","length","map","index","from","ref","onFocus","_state$conversation4","lastMessage","markMessageSeen","CLEAR_COUNTS","markSeen","placeholder","value","onKeyPress","e","charCode","onChange","target","onClick"],"mappings":"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","file":"static/js/46.b21b8792.chunk.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { getCookies, getFileSrcFromPublicFolder } from \"../../utils\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./style.scss\";\r\nimport EventBus from \"../../helpers/eventBus\";\r\nimport { ChatActions } from \"../../redux/actions/chatActions\";\r\nimport {\r\n  getAllMessages,\r\n  sendMessage,\r\n  sendMessageToProvider,\r\n  markMessageSeen,\r\n} from \"./SendMessage\";\r\nimport { customerChatActions } from \"../../redux/reducers/customerChatReducer\";\r\n\r\nconst AttachmentSvg = getFileSrcFromPublicFolder(\"attachement.svg\");\r\nconst SendSvg = getFileSrcFromPublicFolder(\"send.svg\");\r\n\r\nconst CustomerChatBox = (props) => {\r\n  const { state } = props.location;\r\n  const [message, setmessage] = useState(\"\");\r\n  const { id } = getCookies(\"customer_details\");\r\n  const messages = useSelector((_state) =>\r\n    _state.customerChatReducer.messages.filter(\r\n      (msg) =>\r\n        !!state.conversation &&\r\n        !!state?.conversation?.conversationId &&\r\n        msg.conversationId == state?.conversation?.conversationId,\r\n    ),\r\n  );\r\n  \r\n  const dispatch = useDispatch();\r\n  const chatBodyRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // set if possible visitor in store state.\r\n \r\n    // hide chat widget\r\n    getMessages();\r\n\r\n    return () => {};\r\n  }, []);\r\n  const handleMessageSubmit = () => {\r\n    if (!message.trim()) return;\r\n    setmessage(\"\");\r\n    sendMessageToProvider({\r\n      customerId: id,\r\n      conversationId: state.conversation.conversationId,\r\n      text: message,\r\n      providerId: state.providerId, // it is hard coded to test chat\r\n    })\r\n      .then((data) => { \r\n        dispatch({\r\n          type: customerChatActions.NEW_MESSAGE,\r\n          payload: data.data,\r\n        });\r\n        scrollToBottom();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const getMessages = () => {\r\n    if (!state?.conversation && state?.conversationId) return;\r\n    getAllMessages(state?.conversation?.conversationId)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: customerChatActions.SET_MESSAGES_LIST,\r\n          payload: res.data,\r\n        });\r\n        scrollToBottom();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    setTimeout(() => {\r\n      chatBodyRef?.current?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n      });\r\n    }, 300);\r\n  };\r\n\r\n  const markSeen = () => {\r\n    if (!state?.conversation && !state?.conversation?.conversationId) return;\r\n    let lastMessage = messages[messages.length - 1];\r\n    if (lastMessage.from == id || lastMessage.status === 1) return;\r\n    markMessageSeen(lastMessage?.conversationId, lastMessage.from).then((res) =>\r\n      dispatch({\r\n        type: customerChatActions.CLEAR_COUNTS,\r\n        payload: lastMessage?.conversationId,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fae-chat-page-container\">\r\n        <div className=\"chat-card\">\r\n          <div className=\"card-header flex-column\">\r\n            <p>\r\n              {state?.serviceTypeName} <i className=\"fa fa-arrow-right\"></i>{\" \"}\r\n              {state?.providerName}\r\n            </p>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            {messages &&\r\n              messages.length > 0 &&\r\n              messages.map((msg, index) =>\r\n                msg.from && msg.from != id ? (\r\n                  <SenderMessage message={msg.text} status={msg.status} />\r\n                ) : (\r\n                  <ReceiverMessage message={msg.text} status={msg.status} />\r\n                ),\r\n              )}\r\n            <div ref={chatBodyRef}></div>\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <input\r\n              onFocus={() => markSeen()}\r\n              placeholder=\"Type message ...\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={message}\r\n              onKeyPress={(e) => {\r\n                if (e.charCode === 13) {\r\n                  handleMessageSubmit();\r\n                }\r\n              }}\r\n              onChange={(e) => setmessage(e.target.value)}\r\n            />\r\n            <div className=\"buttons-group\">\r\n              <span className=\"mr-auto icon-attachment\">\r\n                <img src={AttachmentSvg} alt=\"attachment\" />\r\n              </span>\r\n              <span\r\n                className=\"ml-auto icon-send\"\r\n                onClick={(e) => handleMessageSubmit(e)}\r\n              >\r\n                <img src={SendSvg} alt=\"send icon\" />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const SenderMessage = ({ message = \"hi\", status = 0 }) => {\r\n  return (\r\n    <>\r\n      <div className=\"message\">\r\n        <div className=\"sender\">{message}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ReceiverMessage = ({ message = \"hi\", status = 0 }) => {\r\n  return (\r\n    <>\r\n      <div className=\"message d-flex flex-column\">\r\n        <div>\r\n          <div className=\"receiver\">{message}</div>\r\n        </div>\r\n        {status === 1 ? (\r\n          <span className=\"badge-seen badge-secondary pull-right\">SEEN</span>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const createVisitor = ({}) => {};\r\n\r\nexport const ProfileAvatar = ({ profile }) => {\r\n  return (\r\n    <div class=\"profile-avatar d-flex\">\r\n      <div class=\"img\">\r\n        <span className=\"active_status_indicator\"></span>\r\n        <img\r\n          src=\"https://png.pngtree.com/png-vector/20200614/ourlarge/pngtree-businessman-user-avatar-character-vector-illustration-png-image_2242909.jpg\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div class=\"username\">\r\n        <p className=\"name\">{profile.name}</p>\r\n        <p className=\"active_label\">Online</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerChatBox;\r\n"],"sourceRoot":""}